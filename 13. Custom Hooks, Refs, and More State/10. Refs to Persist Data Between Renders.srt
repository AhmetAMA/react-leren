1
00:00:00,860 --> 00:00:08,090
So after using a ref to select a Dom element in the previous lecture, let's now focus on the other

2
00:00:08,090 --> 00:00:16,220
use case of refs, which is to simply give us a variable that is persisted across renders without triggering

3
00:00:16,220 --> 00:00:17,510
a rerender.

4
00:00:18,700 --> 00:00:21,370
So let's just search for some movie here.

5
00:00:22,240 --> 00:00:26,500
For example, this amazing classic Back to the Future.

6
00:00:26,770 --> 00:00:33,730
And so now let's say that behind the scenes of this application, we want to count how many times the

7
00:00:33,730 --> 00:00:36,490
user selects a different rating.

8
00:00:37,450 --> 00:00:43,240
So, for example, let's say first I rate this three, then seven and then nine.

9
00:00:43,390 --> 00:00:49,620
So this means that it took me a long time to decide between the right rating of this movie.

10
00:00:49,630 --> 00:00:54,340
And so let's say that in our application we somehow wanted to register that.

11
00:00:54,460 --> 00:01:01,500
Now, I said behind the scenes, because we actually don't want this data to show up on the screen.

12
00:01:01,510 --> 00:01:08,560
So basically we don't want like a counter anywhere here in the app, which tells us how many times the

13
00:01:08,560 --> 00:01:10,350
user has clicked here.

14
00:01:10,360 --> 00:01:13,330
So again, it should happen behind the scenes.

15
00:01:13,330 --> 00:01:20,680
And so this time what we need is a variable that is persisted between renders, but that does not cause

16
00:01:20,710 --> 00:01:23,410
a rerender when it is updated.

17
00:01:23,410 --> 00:01:27,880
And so a ref is a perfect use case for this.

18
00:01:29,820 --> 00:01:36,570
So let's then come here to the movie details component and let's create ourselves a new href.

19
00:01:38,580 --> 00:01:41,340
And I like to do that right here after the States.

20
00:01:43,690 --> 00:01:47,800
So let's call this one here, Count ref.

21
00:01:48,680 --> 00:01:50,740
And then again use ref.

22
00:01:50,750 --> 00:01:56,360
And then just like with use state here, we pass in the initial value of that variable.

23
00:01:56,360 --> 00:02:00,020
And so in the beginning the count is of course at zero.

24
00:02:01,370 --> 00:02:02,210
All right.

25
00:02:02,210 --> 00:02:06,980
And so now the idea is that each time the user gives a new rating.

26
00:02:07,950 --> 00:02:14,730
So by clicking here on one of the stars, this count ref ref should get updated so that then when the

27
00:02:14,730 --> 00:02:18,900
user actually adds the movie to the list, we can.

28
00:02:19,600 --> 00:02:27,970
Then add that here to the new watched movie object so that we can then finally store that value somewhere

29
00:02:27,970 --> 00:02:30,580
so that count that we're going to create here.

30
00:02:30,670 --> 00:02:34,960
But first, let's now take care of actually updating the ref.

31
00:02:35,790 --> 00:02:42,150
And the way we do that is, again, using a use effect, because remember that we are not allowed to

32
00:02:42,180 --> 00:02:45,420
mutate the ref in render logic.

33
00:02:45,480 --> 00:02:48,390
So instead we need to use a use effect.

34
00:02:51,840 --> 00:02:52,620
Okay.

35
00:02:53,490 --> 00:02:56,490
And when do we want to update the ref?

36
00:02:57,140 --> 00:03:01,400
Well each time that the user rates the movie again.

37
00:03:01,790 --> 00:03:05,750
And so that's each time that this piece of state here updates.

38
00:03:07,260 --> 00:03:07,860
Okay.

39
00:03:07,860 --> 00:03:15,510
And so now all we want to do is to take our count ref and then manually mutate the current property

40
00:03:15,900 --> 00:03:25,560
so we can say that count ref dot current should be equal count ref dot current plus one.

41
00:03:26,940 --> 00:03:27,720
Okay.

42
00:03:27,720 --> 00:03:34,590
And actually, this updating here should only happen when there already is a rating because the effect

43
00:03:34,590 --> 00:03:36,210
will also run on mount.

44
00:03:36,210 --> 00:03:42,660
And so then it will already add plus one here even without the user having rated.

45
00:03:43,450 --> 00:03:51,180
Let's just say if there is a user rating, which in the beginning is not, because it will still be

46
00:03:51,180 --> 00:03:52,320
this empty string.

47
00:03:53,780 --> 00:03:54,650
Okay.

48
00:03:55,040 --> 00:04:00,730
So again here we imperatively basically updated this variable.

49
00:04:00,740 --> 00:04:07,700
So with a ref we don't have a setter function, but instead we simply mutate the current property which

50
00:04:07,700 --> 00:04:08,630
is in the ref.

51
00:04:08,750 --> 00:04:14,150
So that's why we say that the ref is basically like a box that can hold any value.

52
00:04:14,300 --> 00:04:20,570
So we could, for example, also, instead of just storing the count here, store all the different

53
00:04:20,570 --> 00:04:23,630
ratings that the user has given in an array.

54
00:04:23,810 --> 00:04:26,390
So that would also be perfectly possible.

55
00:04:27,030 --> 00:04:35,040
But anyway, let's then now come here to the function where the new movie is actually added to the watch

56
00:04:35,040 --> 00:04:35,730
list.

57
00:04:35,850 --> 00:04:38,790
And here let's then create a new property.

58
00:04:39,580 --> 00:04:42,010
Count rating.

59
00:04:42,830 --> 00:04:44,140
Decisions.

60
00:04:44,150 --> 00:04:48,080
And so this should then be equal to the.

61
00:04:48,700 --> 00:04:49,540
Count.

62
00:04:50,510 --> 00:04:53,140
A ref dot current.

63
00:04:53,700 --> 00:04:54,690
Property.

64
00:04:55,600 --> 00:04:55,930
Now.

65
00:04:55,930 --> 00:04:56,440
Right.

66
00:04:56,440 --> 00:04:58,560
And that's it.

67
00:04:58,570 --> 00:05:01,660
So this should now already be working.

68
00:05:01,810 --> 00:05:04,030
So let's test it out here.

69
00:05:04,060 --> 00:05:06,490
Let's just make sure to reload.

70
00:05:09,360 --> 00:05:09,630
No.

71
00:05:09,660 --> 00:05:10,380
Right.

72
00:05:11,290 --> 00:05:14,060
So let's count how many times we click here.

73
00:05:14,080 --> 00:05:16,990
So let's say first we think the movie is a seven.

74
00:05:17,350 --> 00:05:20,260
Then maybe, maybe it's a nine.

75
00:05:20,260 --> 00:05:22,000
But then we think even better.

76
00:05:22,000 --> 00:05:25,850
And then we come to the conclusion that it's actually an eight.

77
00:05:25,870 --> 00:05:28,120
So we decided three times here.

78
00:05:28,120 --> 00:05:30,820
And so let's now add this to the list.

79
00:05:31,230 --> 00:05:36,640
Now, in order to check out if this actually worked, let's come here to our app.

80
00:05:37,390 --> 00:05:42,070
So where we have our state so that in there we can then see.

81
00:05:44,730 --> 00:05:50,970
If the value was correctly set, because of course we are not rendering that new value anywhere here.

82
00:05:52,710 --> 00:05:54,660
So here it is.

83
00:05:54,690 --> 00:06:01,140
And indeed, count rating decisions was set to three, which are exactly the three times that we clicked

84
00:06:01,140 --> 00:06:02,610
on a different rating.

85
00:06:02,790 --> 00:06:03,880
Nice.

86
00:06:03,900 --> 00:06:08,880
So let's just recap what we did here and why this works.

87
00:06:09,060 --> 00:06:15,330
So we created this ref here where we want to store the amount of clicks that happen on a rating before

88
00:06:15,330 --> 00:06:16,770
the movie is added.

89
00:06:16,770 --> 00:06:21,480
But we don't want to render that information onto the user interface.

90
00:06:21,510 --> 00:06:25,560
Or in other words, we do not want to create a rerender.

91
00:06:25,560 --> 00:06:29,010
And so that's why a ref is perfect for this.

92
00:06:29,340 --> 00:06:35,220
So then each time the user rating was updated, the component was re rendered.

93
00:06:35,220 --> 00:06:42,570
And so then after that rerender, this effect was executed, which means that after the rating had been

94
00:06:42,570 --> 00:06:46,500
updated, then our ref would be updated as well.

95
00:06:46,500 --> 00:06:54,250
So we would update the current property to simply adding one so we can actually make this a bit simpler.

96
00:06:56,020 --> 00:06:57,670
So just like this.

97
00:06:57,850 --> 00:06:58,780
Or even.

98
00:06:59,670 --> 00:07:00,570
Could even do this.

99
00:07:01,640 --> 00:07:03,900
So this works just in the exact same way.

100
00:07:03,920 --> 00:07:08,570
And so then we just used the count ref dot current property.

101
00:07:09,620 --> 00:07:15,650
Later down here, whenever we create a new object to be added to our list.

102
00:07:17,090 --> 00:07:23,390
Now, of course, if we tried to do the same thing with a regular variable, then that wouldn't work.

103
00:07:24,110 --> 00:07:25,730
So let's try that also.

104
00:07:25,760 --> 00:07:27,680
Let's say count.

105
00:07:27,710 --> 00:07:30,770
So just count equals zero.

106
00:07:30,890 --> 00:07:31,850
And then.

107
00:07:33,960 --> 00:07:35,740
So let's just do the same thing here.

108
00:07:35,760 --> 00:07:38,580
So if user rating, then.

109
00:07:39,220 --> 00:07:40,090
Count.

110
00:07:40,120 --> 00:07:40,690
Plus.

111
00:07:40,690 --> 00:07:41,320
Plus.

112
00:07:43,450 --> 00:07:47,920
And then here we also need to add count, which for a ref we do not.

113
00:07:49,760 --> 00:07:53,090
And then let's just add that count here.

114
00:07:53,120 --> 00:07:56,150
So then we will see that this doesn't work.

115
00:07:56,900 --> 00:07:58,170
So let's reload.

116
00:07:58,190 --> 00:08:01,280
Let's empty this entire thing.

117
00:08:05,120 --> 00:08:09,110
Okay, so clicking one, two, three, four times.

118
00:08:09,110 --> 00:08:11,420
Now add to the list.

119
00:08:11,420 --> 00:08:15,320
And then again we come here to the state.

120
00:08:15,620 --> 00:08:20,570
So once again, really, really helpful to have these dev tools.

121
00:08:21,660 --> 00:08:28,740
And then we see that we have four count rating decisions, but the count here is only at one.

122
00:08:28,740 --> 00:08:32,940
And so this one is basically just the last click that happened.

123
00:08:34,070 --> 00:08:41,750
So the lat variable, which is just a simple variable, is of course reset after every rerender.

124
00:08:41,750 --> 00:08:44,260
So it's always going back to zero.

125
00:08:44,270 --> 00:08:50,450
And so then when the last click happened, that zero was here, increased to one, and then that count

126
00:08:50,450 --> 00:08:52,250
was added to the object.

127
00:08:52,520 --> 00:09:00,310
So in conclusion, this normal variable is not persisted across renders and it doesn't trigger a rerender.

128
00:09:00,320 --> 00:09:05,030
On the other extreme, we have state which does both of these things.

129
00:09:05,030 --> 00:09:08,090
So it triggers a rerender and it is persisted.

130
00:09:08,090 --> 00:09:15,500
And then in the middle we have a ref which is indeed persisted across renders, but it does not trigger

131
00:09:15,500 --> 00:09:17,720
a rerender when updated.

132
00:09:17,720 --> 00:09:23,180
And so that's why we normally don't use a ref in the JS output.

133
00:09:23,930 --> 00:09:24,680
All right.

134
00:09:24,770 --> 00:09:34,970
So this was really just to drive home the message how refs are different from both states and also from

135
00:09:34,970 --> 00:09:36,350
normal variables.

136
00:09:37,290 --> 00:09:38,020
Okay.

137
00:09:39,720 --> 00:09:42,300
Now we still have some problem.

138
00:09:43,630 --> 00:09:44,890
We still have to count.

139
00:09:45,010 --> 00:09:46,000
Ah, here it is.

140
00:09:46,270 --> 00:09:48,700
So forgot to delete this one.

141
00:09:49,270 --> 00:09:50,020
Okay.

142
00:09:50,020 --> 00:09:56,130
And later on we will even see some other more real world use cases of refs.

143
00:09:56,140 --> 00:09:59,910
For example, storing the ID of a timer to stop it.

144
00:09:59,920 --> 00:10:04,990
But for now, I hope that this use case of a ref also made sense to you.

145
00:10:04,990 --> 00:10:11,650
And we don't use refs all the time, but it's still good to know how they work and to keep them in the

146
00:10:11,650 --> 00:10:12,970
back of your mind.
