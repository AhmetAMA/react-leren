1
00:00:00,990 --> 00:00:04,620
It's time to introduce yet another react hook.

2
00:00:04,620 --> 00:00:07,920
And this time it's the use rev hook.

3
00:00:07,950 --> 00:00:13,070
And fortunately for us, this is one of the easiest hooks of all.

4
00:00:13,080 --> 00:00:15,420
And so let's now take a look.

5
00:00:17,200 --> 00:00:22,720
So we use the use ref hook to create something called a ref.

6
00:00:23,020 --> 00:00:25,930
But what actually is a ref?

7
00:00:26,200 --> 00:00:34,450
Well, ref stands for reference and essentially it's like a box into which we can put any data that

8
00:00:34,450 --> 00:00:37,240
we want to be preserved between renderers.

9
00:00:37,390 --> 00:00:45,160
Now, in technical terms, when we use Useref, react will give us an object with a mutable current

10
00:00:45,160 --> 00:00:53,650
property and we can then write any data into this current property and of course also read from it.

11
00:00:54,010 --> 00:01:02,080
So in this small example, the current property was first set to the initial value of 23 and we then

12
00:01:02,080 --> 00:01:04,150
changed it to 1000.

13
00:01:04,300 --> 00:01:09,670
So as you can see, this current property is actually mutable.

14
00:01:09,670 --> 00:01:13,150
So unlike everything else in React.

15
00:01:13,540 --> 00:01:21,170
But what's really special about refs is that they are persisted across renders so their current property

16
00:01:21,170 --> 00:01:24,670
value stays the same between multiple renders.

17
00:01:24,680 --> 00:01:31,100
So just like state and this gives us two big use cases for refs.

18
00:01:31,310 --> 00:01:38,780
First, as we just said, we can use refs to create variables that will stay the same between renders

19
00:01:38,780 --> 00:01:39,800
and useful.

20
00:01:39,800 --> 00:01:47,030
Examples of this are preserving the previous state or storing the ID of a set timeout function.

21
00:01:47,470 --> 00:01:55,960
Now, the second use case is actually far more important, which is to select and store Dom elements.

22
00:01:56,050 --> 00:02:03,370
So this is what we attempted to do in the last lecture and which actually brought us to this lecture.

23
00:02:03,640 --> 00:02:11,950
So just like the ID of a set timeout, a Dom element is also a piece of data that we want to store and

24
00:02:11,950 --> 00:02:14,110
preserve across renders.

25
00:02:14,110 --> 00:02:16,870
And so refs are perfect for this.

26
00:02:17,550 --> 00:02:24,510
Now, Revs are usually for data that is not rendered in the visual output of the component.

27
00:02:24,780 --> 00:02:31,710
So usually revs only appear in event handlers or effects, but not in the JS.

28
00:02:32,550 --> 00:02:39,770
Now of course we can use revs inside JS too, but usually that's not the place for them.

29
00:02:39,780 --> 00:02:46,590
If you need data that participates in the visual output of the component, that's usually a good sign

30
00:02:46,590 --> 00:02:50,280
that you actually need state and not a ref.

31
00:02:50,550 --> 00:02:58,590
And speaking of state, just like with state, you are not allowed to write or to read the current property

32
00:02:58,590 --> 00:03:03,840
in render logic as that would create an undesirable side effect.

33
00:03:03,870 --> 00:03:09,180
Instead, we usually perform these mutations inside a useeffect hook.

34
00:03:09,720 --> 00:03:17,950
Okay, now I've hinted a couple of times at all the similarities between refs and state, which is because

35
00:03:17,950 --> 00:03:20,740
these two are in fact quite similar.

36
00:03:21,070 --> 00:03:26,590
So let's now analyze what they have in common and what's different between them.

37
00:03:27,970 --> 00:03:34,200
So in a way, we can say that refs are like state but with less powers.

38
00:03:34,210 --> 00:03:39,420
So what they have in common is that they are both persisted across renders.

39
00:03:39,430 --> 00:03:44,470
So the component remembers these values even after rerendering.

40
00:03:44,560 --> 00:03:51,310
The big difference is that updating state will actually cause the component to rerender while updating

41
00:03:51,310 --> 00:03:52,990
refs does not.

42
00:03:53,140 --> 00:04:00,190
So the big takeaway from this is that we use state when we want to store data that should rerender the

43
00:04:00,190 --> 00:04:07,510
component and refs for data that should only be remembered by the component over time but never rerender

44
00:04:07,510 --> 00:04:08,050
it.

45
00:04:08,230 --> 00:04:15,040
And this is basically also what we already learned back in the lecture on the fundamentals of state

46
00:04:15,040 --> 00:04:16,000
management.

47
00:04:16,270 --> 00:04:20,650
So remember that this diagram is taken from that lecture.

48
00:04:20,980 --> 00:04:26,080
Now, back then, we didn't know what a ref was, but now we do.

49
00:04:27,270 --> 00:04:34,470
Now, going back to the examples of preserving previous state and storing the ID of a set timeout.

50
00:04:34,500 --> 00:04:41,490
These are pieces of data that we want to react to remember between renders, but we don't want them

51
00:04:41,490 --> 00:04:44,820
to rerender the UI whenever we update them.

52
00:04:44,820 --> 00:04:48,960
And so that's why we use refs for this kind of data.

53
00:04:49,290 --> 00:04:56,130
So this is the main distinction between state and refs, but there are also some minor ones.

54
00:04:56,220 --> 00:05:02,520
So as we also just learned, state is immutable, but refs are not.

55
00:05:02,670 --> 00:05:10,380
Also, state is updated asynchronously, which means that we cannot use the new state immediately after

56
00:05:10,380 --> 00:05:12,450
updating it with the refs.

57
00:05:12,480 --> 00:05:19,890
On the other hand, updates are not asynchronous and so we can actually read a new current property

58
00:05:19,920 --> 00:05:22,310
immediately after updating it.

59
00:05:22,320 --> 00:05:26,670
So basically just like any other regular JavaScript object.

60
00:05:26,950 --> 00:05:27,880
Now, okay.

61
00:05:27,880 --> 00:05:30,460
And that does it for this video.

62
00:05:30,460 --> 00:05:33,310
So see you back in VS code.
