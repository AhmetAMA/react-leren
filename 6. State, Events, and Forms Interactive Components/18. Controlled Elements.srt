1
00:00:00,880 --> 00:00:07,330
Let's now learn about yet another fundamental react concept, which is controlled elements.

2
00:00:07,510 --> 00:00:14,830
So let's take a look what they are and how we use controlled elements when working with forms in React.

3
00:00:16,150 --> 00:00:23,560
So to start, what we need to understand is that by default, these input fields like this input and

4
00:00:23,560 --> 00:00:28,290
also this select, they maintain their own state inside the Dom.

5
00:00:28,300 --> 00:00:32,410
So basically inside the HTML element itself.

6
00:00:32,620 --> 00:00:39,970
Now this makes it hard to read their values and it also leaves this state right here in the Dom, which

7
00:00:40,000 --> 00:00:42,280
for many reasons is not ideal.

8
00:00:42,280 --> 00:00:48,280
So in React, we usually like to keep all this state in just one central place.

9
00:00:48,280 --> 00:00:52,840
So inside the React application and not inside the Dom.

10
00:00:52,930 --> 00:00:58,000
And so in order to do that, we use a technique called controlled elements.

11
00:00:58,000 --> 00:01:05,410
And so with this technique it is react who controls and owns the state of these input fields and no

12
00:01:05,410 --> 00:01:06,520
longer the Dom.

13
00:01:06,790 --> 00:01:13,480
So since we want to now keep this data inside the application, what that means is that we need some

14
00:01:13,480 --> 00:01:14,710
state, right?

15
00:01:14,710 --> 00:01:21,350
Because that form data of course changes over time and we also want to maintain our application in sync

16
00:01:21,350 --> 00:01:22,070
with it.

17
00:01:23,370 --> 00:01:28,870
So in order to implement the Controlled Elements technique, we follow three steps.

18
00:01:28,890 --> 00:01:31,230
First, we create a piece of state.

19
00:01:31,410 --> 00:01:33,240
So let's start with that.

20
00:01:33,240 --> 00:01:36,720
And we will start here with this actual input element.

21
00:01:36,750 --> 00:01:40,260
So with this text field right there.

22
00:01:43,080 --> 00:01:46,110
So that field is for the item description.

23
00:01:46,110 --> 00:01:48,240
And so we call it description.

24
00:01:48,240 --> 00:01:52,140
And then as always, the setter function is set.

25
00:01:52,990 --> 00:01:53,920
Description.

26
00:01:54,190 --> 00:01:57,070
And so then we use the use state hook.

27
00:01:57,190 --> 00:01:59,410
So the use state function.

28
00:01:59,410 --> 00:02:07,090
And then just like before when vs code shows us this autocompletion here, make sure to click here or

29
00:02:07,090 --> 00:02:10,840
to hit enter because that will then automatically include.

30
00:02:10,870 --> 00:02:16,180
So it will import this use state hook into this file.

31
00:02:16,180 --> 00:02:19,240
So it will automatically include this line of code.

32
00:02:19,240 --> 00:02:24,940
And then for some reason that didn't work in your VS code, then make sure to just write this out by

33
00:02:24,940 --> 00:02:25,510
hand.

34
00:02:26,410 --> 00:02:31,930
Now, the default value for this description can just be an empty string like this.

35
00:02:32,230 --> 00:02:36,930
And so now we finished the first step of this technique.

36
00:02:36,940 --> 00:02:43,090
So we have our piece of state and now we use that state as a value of the input field.

37
00:02:44,010 --> 00:02:48,810
So we come down here to the input that we want react to control.

38
00:02:49,690 --> 00:02:54,610
And then we specify the value, which again, is just a normal HTML field.

39
00:02:54,790 --> 00:02:55,380
All right.

40
00:02:55,390 --> 00:02:59,980
So even in HTML, you can use value and then set it to something.

41
00:02:59,980 --> 00:03:02,860
So we could also do just this.

42
00:03:03,800 --> 00:03:04,550
All right.

43
00:03:04,700 --> 00:03:07,180
But now we don't want that.

44
00:03:07,190 --> 00:03:09,680
But instead, we want our description.

45
00:03:11,640 --> 00:03:12,630
Give it a save.

46
00:03:12,720 --> 00:03:14,100
And there we go.

47
00:03:14,980 --> 00:03:17,110
Let's just reload to get rid of this.

48
00:03:17,960 --> 00:03:18,200
Yeah.

49
00:03:18,200 --> 00:03:23,410
Here we get another warning and it's already telling us the third step that we need to take.

50
00:03:23,420 --> 00:03:26,240
But for now, let's just see what happens.

51
00:03:26,240 --> 00:03:29,660
If, for example, here we right now test.

52
00:03:30,810 --> 00:03:35,280
So you see, now our input field has the value of our state.

53
00:03:36,860 --> 00:03:37,360
Okay.

54
00:03:37,370 --> 00:03:39,260
And now for the final step.

55
00:03:39,260 --> 00:03:44,420
We, of course, now need to somehow connect this state with the value that we are actually going to

56
00:03:44,420 --> 00:03:45,320
type there.

57
00:03:46,750 --> 00:03:52,690
Right, because now the state will simply always stay empty, even if we type something here.

58
00:03:53,290 --> 00:03:58,750
So React is now controlling this element and always sets it to the description.

59
00:03:58,750 --> 00:04:03,190
But the description right now always stays at this empty string.

60
00:04:03,190 --> 00:04:06,700
And so no matter what we do right now, we cannot change this.

61
00:04:06,940 --> 00:04:13,420
So what we need to do is to also, on the same element, listen for the change event.

62
00:04:14,690 --> 00:04:17,450
So that's using the onchange prop.

63
00:04:18,630 --> 00:04:21,480
And then here, let's just define an inline function.

64
00:04:21,600 --> 00:04:25,620
And this function receives the event that was fired off.

65
00:04:25,770 --> 00:04:28,140
So in this case, the change event.

66
00:04:28,500 --> 00:04:34,200
And then here, let's just type the code and I will explain what actually is happening here.

67
00:04:34,470 --> 00:04:38,010
So set description E dot target.

68
00:04:38,800 --> 00:04:40,390
Dot value.

69
00:04:41,270 --> 00:04:41,870
All right.

70
00:04:41,870 --> 00:04:45,410
And now if we type here first, let's reload again.

71
00:04:47,040 --> 00:04:49,860
Now that we type here, it works.

72
00:04:49,860 --> 00:04:55,590
And to make this even more visual, let's come back here to our dev tools and then here in the form.

73
00:04:56,410 --> 00:04:58,660
We need even more space.

74
00:04:59,380 --> 00:05:02,380
So you see that we have our state of test.

75
00:05:02,380 --> 00:05:07,510
And if we write here, then notice how that state down there is updating.

76
00:05:09,400 --> 00:05:10,990
So we can write anything.

77
00:05:10,990 --> 00:05:16,360
And then basically it will get synchronized with this state that we have in our application.

78
00:05:16,360 --> 00:05:22,180
And so now it is in fact React that owns this state and that is controlling the state.

79
00:05:22,480 --> 00:05:24,970
But now back here to this line of code.

80
00:05:25,180 --> 00:05:32,200
So basically, whenever we type something in this field, the change event is fired off and we can react

81
00:05:32,200 --> 00:05:36,190
to that event here with this Onchange event handler.

82
00:05:36,190 --> 00:05:41,800
And so here we pass in the function and the function as always receives the event.

83
00:05:41,800 --> 00:05:44,230
And then on the event we read Target.

84
00:05:44,230 --> 00:05:47,500
And Target is basically this entire element.

85
00:05:47,500 --> 00:05:52,660
And then this element dot value is exactly the text that we wrote.

86
00:05:53,530 --> 00:05:58,690
And just to make this a bit more visual, because I know that this can be a bit tricky to understand,

87
00:05:58,690 --> 00:06:00,820
so I want to make sure that you get it.

88
00:06:00,970 --> 00:06:02,830
So let's log to the console.

89
00:06:02,830 --> 00:06:06,850
Also this E dot target, maybe.

90
00:06:11,820 --> 00:06:15,060
So as I delete now, this will fire off the change event.

91
00:06:15,150 --> 00:06:18,060
And so then here we get E dot target.

92
00:06:19,090 --> 00:06:23,050
So as I hover it, you see that target is the entire element.

93
00:06:23,050 --> 00:06:23,680
Indeed.

94
00:06:24,850 --> 00:06:27,880
So watch what happens when I set or when I log.

95
00:06:27,910 --> 00:06:30,430
E dot target dot value.

96
00:06:33,600 --> 00:06:38,970
So immediately that character that I just typed was locked here to the console.

97
00:06:38,970 --> 00:06:42,390
And not just the character, but actually the entire value.

98
00:06:42,420 --> 00:06:48,480
So now I write another one and then now we get to then test and then test.

99
00:06:48,480 --> 00:06:57,360
And so it is this value that each time that we write something, we set as the new state of the description.

100
00:06:58,360 --> 00:06:59,080
All right.

101
00:07:00,280 --> 00:07:05,860
So just to drive this home, each time that we type here, we set the state again.

102
00:07:05,860 --> 00:07:12,150
So we set it to the string that is currently in this input field which will then rerender this view.

103
00:07:12,160 --> 00:07:14,500
So this entire form here actually.

104
00:07:14,500 --> 00:07:19,750
And so then that new state of description will get placed there as the value.

105
00:07:19,870 --> 00:07:25,720
So we always need both the value and the change here on the input element.

106
00:07:27,820 --> 00:07:30,190
Let's get rid of these curly braces here.

107
00:07:33,930 --> 00:07:35,370
Yeah, just like this.

108
00:07:35,490 --> 00:07:38,370
And just to see if we actually understood this.

109
00:07:38,400 --> 00:07:42,240
We now need to do the exact same thing with the select element.

110
00:07:42,240 --> 00:07:46,770
And if you want, you can actually pause the video and try that as a challenge now.

111
00:07:48,380 --> 00:07:50,000
So did you try that?

112
00:07:50,090 --> 00:07:55,040
Well, if not, that's no problem at all, because we only did this once.

113
00:07:55,040 --> 00:07:59,690
So I understand that it's still quite fresh and maybe confusing.

114
00:07:59,900 --> 00:08:05,840
But anyway, we now also need to control this select input element right here.

115
00:08:06,020 --> 00:08:08,080
So that's going to be the quantity.

116
00:08:08,090 --> 00:08:14,210
So let's call that state quantity and the setter function is set quantity.

117
00:08:16,200 --> 00:08:17,670
And then again use state.

118
00:08:17,670 --> 00:08:19,590
And here the default value.

119
00:08:19,620 --> 00:08:21,420
We want it to be one.

120
00:08:21,570 --> 00:08:25,630
Let's just say five for now, just so we see the effect in the UI.

121
00:08:26,740 --> 00:08:27,460
Okay.

122
00:08:27,580 --> 00:08:29,290
So that's the first step.

123
00:08:29,560 --> 00:08:33,310
Now the second step is to then define the value.

124
00:08:33,430 --> 00:08:37,660
And so in this moment, react then starts controlling this element.

125
00:08:38,750 --> 00:08:40,850
So value of quantity.

126
00:08:40,880 --> 00:08:42,320
Well, what was that?

127
00:08:46,060 --> 00:08:49,750
And you see immediately we get this five.

128
00:08:50,510 --> 00:08:51,620
Begin with this.

129
00:08:51,650 --> 00:08:54,170
It's easier to see with our dev tools.

130
00:08:55,890 --> 00:08:58,020
And yeah, so that's the five.

131
00:08:58,050 --> 00:09:01,350
But of course, if we change this now, then nothing will happen.

132
00:09:01,740 --> 00:09:08,160
And so the reason for that is the same as before, because this value is now coming from our quantity

133
00:09:08,190 --> 00:09:08,790
state.

134
00:09:08,820 --> 00:09:12,060
The Dom is no longer in charge of this value now.

135
00:09:12,150 --> 00:09:17,660
The only thing that we now have to do is to give this the ability to change itself.

136
00:09:17,670 --> 00:09:23,460
So to basically update the state each time that we change this value here.

137
00:09:29,230 --> 00:09:33,910
So that's again, using the onchange handler.

138
00:09:34,210 --> 00:09:36,630
And this function gets the current event.

139
00:09:36,640 --> 00:09:39,370
And here we now do the exact same thing.

140
00:09:39,370 --> 00:09:40,570
So we set.

141
00:09:41,540 --> 00:09:42,470
Quantity.

142
00:09:43,560 --> 00:09:46,080
Based on E dot target.

143
00:09:46,730 --> 00:09:47,480
Dot.

144
00:09:48,250 --> 00:09:48,850
Value.

145
00:09:48,850 --> 00:09:52,570
And by the way, this value is coming directly from the option.

146
00:09:52,570 --> 00:09:54,400
So right from here.

147
00:09:54,400 --> 00:09:58,930
So that's why we need to set the value here inside of each option.

148
00:10:00,090 --> 00:10:00,720
Just to make sure.

149
00:10:00,720 --> 00:10:01,920
Let's give it a save.

150
00:10:02,160 --> 00:10:04,980
And there we go.

151
00:10:05,340 --> 00:10:09,780
So you see it changed here and it also changed here.

152
00:10:10,080 --> 00:10:14,190
Maybe you cannot really see this as it's right at the bottom.

153
00:10:14,190 --> 00:10:16,680
But yeah, here is the ten.

154
00:10:16,710 --> 00:10:20,940
Now, what we can see immediately is that this is a string.

155
00:10:20,970 --> 00:10:25,350
While in the beginning when we first load the app, let's try that.

156
00:10:25,380 --> 00:10:28,590
We get the five but without the quotes.

157
00:10:28,590 --> 00:10:31,920
So now this is actually not a string, it's still a number.

158
00:10:31,920 --> 00:10:35,310
And that's because we set the default here as a number.

159
00:10:35,310 --> 00:10:37,560
But then as soon as we change this.

160
00:10:39,030 --> 00:10:40,410
For example, to something.

161
00:10:40,410 --> 00:10:42,660
Then here we get this string.

162
00:10:42,660 --> 00:10:48,540
And so the reason for that is that here e dot target dot value is always a string.

163
00:10:48,630 --> 00:10:55,650
So before we place this value into the state, let's first convert it to a number and we can do that

164
00:10:55,650 --> 00:10:57,330
in a few different ways.

165
00:10:57,540 --> 00:11:03,720
We can use the trick of using a plus, or we can be a bit more explicit.

166
00:11:04,490 --> 00:11:06,560
For example, using the number function.

167
00:11:06,560 --> 00:11:10,760
So I prefer to doing it like this, which makes the code a bit more readable.

168
00:11:10,970 --> 00:11:12,470
So give it a save.

169
00:11:12,470 --> 00:11:13,460
And now.

170
00:11:15,040 --> 00:11:15,780
Let's see.

171
00:11:15,790 --> 00:11:16,090
Yeah.

172
00:11:16,090 --> 00:11:17,170
Now we get a number.

173
00:11:17,170 --> 00:11:22,300
And of course, still when we write here, that will also update the state down here.

174
00:11:22,690 --> 00:11:29,620
And this was actually an excellent demo to show you how useful really these dev tools are because they

175
00:11:29,620 --> 00:11:32,260
allowed us to immediately spot that.

176
00:11:32,260 --> 00:11:34,780
We didn't have a number here but a string.

177
00:11:34,780 --> 00:11:39,040
And so with this we prevented a potential bug in our code.

178
00:11:39,460 --> 00:11:40,180
Great.

179
00:11:40,180 --> 00:11:42,580
So hopefully you got that.

180
00:11:42,610 --> 00:11:45,640
So you understood exactly how that works.

181
00:11:46,400 --> 00:11:53,240
So just to quickly recap, the technique of controlled elements basically consists of three steps.

182
00:11:53,240 --> 00:11:56,970
So we define a piece of state like this description here.

183
00:11:56,990 --> 00:12:02,100
Then we use that piece of state on the element that we want to control.

184
00:12:02,120 --> 00:12:07,690
So we basically force the element to always take the value of this state variable.

185
00:12:07,700 --> 00:12:14,420
And then finally, of course, we need to update that state variable and we do so here with the Onchange

186
00:12:14,420 --> 00:12:20,170
handler, where we then set the description to the current value of that input field.

187
00:12:20,180 --> 00:12:23,090
And so with this it is now this component.

188
00:12:23,120 --> 00:12:29,840
So basically it's react who is in charge of the state and really of the entire element.

189
00:12:29,840 --> 00:12:34,220
And so that's the reason why this technique is called controlled element.

190
00:12:34,940 --> 00:12:35,570
Great.

191
00:12:35,570 --> 00:12:37,130
So that should be clear now.

192
00:12:37,130 --> 00:12:41,360
And so let's now go ahead and just quickly use these values here.

193
00:12:41,570 --> 00:12:45,770
For example, we can create a new item object.

194
00:12:47,240 --> 00:12:48,710
So a description.

195
00:12:50,070 --> 00:12:51,240
Quantity.

196
00:12:52,580 --> 00:12:56,660
Uh, also, we have the packed state in each of these items.

197
00:12:58,020 --> 00:13:02,100
And by default, of course, the items should not be packed.

198
00:13:02,130 --> 00:13:05,030
So let's set it to false here.

199
00:13:05,040 --> 00:13:06,600
And then we also need an ID.

200
00:13:07,590 --> 00:13:13,110
Now, we could use some library here to generate that ID, but let's do it quick and dirty here.

201
00:13:13,110 --> 00:13:14,850
Just with Date.now.

202
00:13:15,830 --> 00:13:18,280
So that should just work here in this case.

203
00:13:18,290 --> 00:13:21,980
And then for now, we will just log it to the console.

204
00:13:24,960 --> 00:13:25,150
No.

205
00:13:25,180 --> 00:13:25,980
All right.

206
00:13:26,250 --> 00:13:29,880
Let's go to our console, reload all of this.

207
00:13:30,180 --> 00:13:35,490
And actually, let's also set it to one, which is the default that makes most sense.

208
00:13:37,150 --> 00:13:39,700
So let's say that we need ten.

209
00:13:40,560 --> 00:13:41,390
Shirts.

210
00:13:41,490 --> 00:13:45,540
So hit, enter and beautiful.

211
00:13:45,540 --> 00:13:50,730
So we got our data here from the state and it contains the description.

212
00:13:50,730 --> 00:13:56,490
It contains the quantity right here and then these other data that we just defined.

213
00:13:56,490 --> 00:14:01,080
So some random ID and also this packed state set to false.

214
00:14:01,440 --> 00:14:06,030
So with this, we learned how we get now this data out of the form.

215
00:14:06,800 --> 00:14:13,610
Now, just to finish, let's tweak our handle submit function a little bit, for example, when this

216
00:14:13,610 --> 00:14:14,420
happens.

217
00:14:14,420 --> 00:14:21,020
So when we submit the form without any item, then still this works, but the description is simply

218
00:14:21,020 --> 00:14:24,860
set to an empty string, which is our default here.

219
00:14:25,040 --> 00:14:32,270
However, we don't want this to happen, so when there is no description here, then we shouldn't even

220
00:14:32,300 --> 00:14:34,040
be able to submit the form.

221
00:14:35,080 --> 00:14:37,260
So that's simple enough.

222
00:14:37,270 --> 00:14:40,270
We can just add like a guard clause here.

223
00:14:41,310 --> 00:14:45,120
So we can say if there is no description.

224
00:14:45,680 --> 00:14:47,270
Then return immediately.

225
00:14:47,450 --> 00:14:50,060
So basically, then nothing is going to happen.

226
00:14:50,060 --> 00:14:52,490
And again, this is just some normal JavaScript.

227
00:14:52,520 --> 00:14:54,020
Nothing to do with React.

228
00:14:56,290 --> 00:14:58,360
So you see, nothing happens now.

229
00:14:59,020 --> 00:15:00,100
But if so.

230
00:15:01,370 --> 00:15:03,260
Then we get our object.

231
00:15:03,270 --> 00:15:10,250
And now finally, usually when we submit a form, then afterwards, once that submission is done, the

232
00:15:10,250 --> 00:15:12,560
form should go back to its initial state.

233
00:15:13,010 --> 00:15:14,510
So let's also do that.

234
00:15:14,510 --> 00:15:19,130
And for that we can simply use our setter functions, right?

235
00:15:19,130 --> 00:15:24,980
And so that's the beauty of React being in charge of the form, because now all we have to do is to

236
00:15:24,980 --> 00:15:32,300
update the state and then this enables react to automatically keep this state in sync with these form

237
00:15:32,300 --> 00:15:33,170
elements.

238
00:15:33,410 --> 00:15:37,160
So basically that's the whole idea of the controlled elements.

239
00:15:37,160 --> 00:15:44,840
It's to allow react to keep our component state in sync with the state of these Dom form elements.

240
00:15:45,170 --> 00:15:47,840
But anyway, let's now do what I just said.

241
00:15:47,870 --> 00:15:56,780
So setting the description back to its initial state and set the quantity also back to its initial state.

242
00:15:58,400 --> 00:16:00,860
So let's try that one more time.

243
00:16:04,630 --> 00:16:06,430
And beautiful.

244
00:16:06,580 --> 00:16:09,580
So that worked really, really nicely.

245
00:16:09,760 --> 00:16:12,420
So this form is now a lot more real world.

246
00:16:12,430 --> 00:16:14,380
It's back to its initial state.

247
00:16:14,380 --> 00:16:16,420
And then down here we get the data.

248
00:16:16,600 --> 00:16:20,020
But now what do we do with this data?

249
00:16:20,050 --> 00:16:26,580
So at some point we will want to actually render this new object here into the user interface.

250
00:16:26,590 --> 00:16:29,920
So right here into this packing list.

251
00:16:29,950 --> 00:16:30,910
Right.

252
00:16:31,000 --> 00:16:33,640
So how do you think we will do that?

253
00:16:33,670 --> 00:16:36,910
So how can we get this new state?

254
00:16:37,180 --> 00:16:42,190
So basically this new object that we just created into this list.

255
00:16:42,310 --> 00:16:44,920
And just as a reminder, this list.

256
00:16:45,680 --> 00:16:48,380
Well, it's even easier to see in the component tree.

257
00:16:49,580 --> 00:16:52,370
So we have to form and here is the list.

258
00:16:52,370 --> 00:16:57,170
So we want to get the data from this form into this packing list right here.

259
00:16:57,410 --> 00:17:00,560
So do you think that we could do that with props?

260
00:17:00,920 --> 00:17:02,780
Well, not really.

261
00:17:02,780 --> 00:17:03,320
Right.

262
00:17:03,320 --> 00:17:05,910
Because these are sibling components.

263
00:17:05,930 --> 00:17:09,500
The form is not a parent component of the packing list.

264
00:17:09,500 --> 00:17:14,080
And therefore, we cannot pass props from form into the packing list.

265
00:17:14,090 --> 00:17:14,750
Right.

266
00:17:14,750 --> 00:17:20,330
So because data can only flow down the tree but not up or sideways.

267
00:17:20,330 --> 00:17:24,340
So that was one of the important things that we learned about props.

268
00:17:24,350 --> 00:17:25,430
Remember that?

269
00:17:25,700 --> 00:17:31,700
So therefore, if we cannot use props in a simple way, we need to find another solution.

270
00:17:31,790 --> 00:17:37,850
And so this is where we really need to start thinking more about state and state management.

271
00:17:37,850 --> 00:17:45,620
But since this is so important, as a React developer, I created an entire separate section about thinking

272
00:17:45,620 --> 00:17:48,770
in React, and that section is up next.

273
00:17:49,450 --> 00:17:55,360
So what we're going to do now is to take a break in this application and finish this section with a

274
00:17:55,360 --> 00:18:02,050
brief summary and a challenge to consolidate our knowledge about how to use state in React.

275
00:18:02,050 --> 00:18:08,110
And then after that, we will come back here to this application and then we will really make it work.

276
00:18:08,110 --> 00:18:14,980
So then we will be able to pass data basically from the form into the list.

277
00:18:14,980 --> 00:18:16,930
So that's going to be a lot of fun.

278
00:18:16,930 --> 00:18:23,500
So make sure to finish this section and then right afterwards, let's keep going with this application.
