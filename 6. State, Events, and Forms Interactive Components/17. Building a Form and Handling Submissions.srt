1
00:00:00,870 --> 00:00:07,530
One of the most important things that we do on the web is to interact with web applications through

2
00:00:07,530 --> 00:00:08,330
forms.

3
00:00:08,340 --> 00:00:12,540
So forms are fundamental in web applications.

4
00:00:12,540 --> 00:00:17,550
And so let's now start learning how to work with forms in React.

5
00:00:18,660 --> 00:00:25,740
And first off, when we build forms in React, we use the normal HTML form element.

6
00:00:26,270 --> 00:00:27,560
So we have a form.

7
00:00:27,560 --> 00:00:32,420
And then here let's add the select the input and the button.

8
00:00:33,150 --> 00:00:38,150
So just looking at the demo here in HTML, this is a select element.

9
00:00:38,160 --> 00:00:42,240
This is an input element and this is just a regular button.

10
00:00:44,190 --> 00:00:44,550
Uh, here.

11
00:00:44,550 --> 00:00:45,990
We need to change that as well.

12
00:00:45,990 --> 00:00:52,710
And there is a setting in vs code that will make it so that as I update this one, the closing tag also

13
00:00:52,710 --> 00:00:53,720
gets updated.

14
00:00:53,730 --> 00:00:57,810
But I will find that out after this video and then I will let you know.

15
00:00:58,440 --> 00:01:02,930
But anyway, let's now create that select element.

16
00:01:02,940 --> 00:01:06,210
And now here we want to create a bunch of numbers.

17
00:01:06,800 --> 00:01:12,770
So inside the select we create one option with the value.

18
00:01:12,770 --> 00:01:15,470
And here let's use again JavaScript mode.

19
00:01:15,800 --> 00:01:20,930
So in order to pass in an actual number one and not the string of one.

20
00:01:22,250 --> 00:01:26,140
Let's just duplicate this a few times because we will actually not use this.

21
00:01:26,150 --> 00:01:30,140
So you don't need to write this code if you don't want to.

22
00:01:30,230 --> 00:01:34,400
So this is just to show you what we will do instead in a minute here.

23
00:01:34,730 --> 00:01:38,600
Let's just create that input first of the type.

24
00:01:39,570 --> 00:01:40,340
Text.

25
00:01:40,350 --> 00:01:43,230
And let's also include a placeholder here.

26
00:01:44,880 --> 00:01:47,460
And again, this is just normal HTML.

27
00:01:47,610 --> 00:01:49,890
What we're doing here right now.

28
00:01:51,930 --> 00:01:54,900
Finally a button with Add.

29
00:01:56,070 --> 00:01:56,330
Now.

30
00:01:56,370 --> 00:01:56,940
Okay.

31
00:01:56,940 --> 00:01:57,840
Beautiful.

32
00:01:57,840 --> 00:02:00,360
So that looks just like here.

33
00:02:01,220 --> 00:02:02,450
Or very similar.

34
00:02:03,180 --> 00:02:04,930
So here we have the one, two, three.

35
00:02:04,950 --> 00:02:06,480
So these three values.

36
00:02:06,480 --> 00:02:10,410
But here in the real app, we have 20.

37
00:02:10,440 --> 00:02:16,080
So, of course, we don't want to write these 20 options over there by hand.

38
00:02:16,200 --> 00:02:16,920
Right.

39
00:02:16,920 --> 00:02:25,330
So instead what we do is to inside of JavaScript, we will create an array with the numbers from 1 to

40
00:02:25,330 --> 00:02:31,830
20 and then we will loop over that array and basically create a list of option elements.

41
00:02:32,040 --> 00:02:39,150
So let's do that and we will use a nice trick which is called array dot from and it's not really important

42
00:02:39,150 --> 00:02:40,620
how this function works.

43
00:02:41,300 --> 00:02:43,850
So let's just follow this here.

44
00:02:43,850 --> 00:02:46,550
And actually we will do this all the time in React.

45
00:02:46,550 --> 00:02:49,310
So this trick is actually quite important.

46
00:02:49,460 --> 00:02:55,760
So as a first parameter here, we can pass in an object with the length property and set that to 20.

47
00:02:55,790 --> 00:02:59,150
So that will then create an empty array with 20 elements.

48
00:02:59,150 --> 00:03:05,060
And then as a second part, we can pass in basically something like a map function.

49
00:03:05,570 --> 00:03:12,020
So that will receive as a first argument the current value and as a second argument, the index.

50
00:03:12,530 --> 00:03:18,530
And so here we are only interested in that index because we will now return that index which starts

51
00:03:18,530 --> 00:03:20,540
at zero plus one.

52
00:03:20,540 --> 00:03:25,250
And so then we get an array which goes from 1 to 20.

53
00:03:25,730 --> 00:03:32,690
And if we wanted, we could just grab this piece of code right here and run it inside of our console.

54
00:03:33,600 --> 00:03:34,930
Make it a bit bigger.

55
00:03:34,950 --> 00:03:37,410
And yeah, indeed, we are missing the key.

56
00:03:37,890 --> 00:03:39,000
Somewhere there.

57
00:03:39,000 --> 00:03:39,990
But never mind.

58
00:03:40,020 --> 00:03:41,550
We will fix that in a minute.

59
00:03:42,190 --> 00:03:45,610
And so indeed, here we get that array from 1 to 20.

60
00:03:46,240 --> 00:03:46,960
All right.

61
00:03:46,960 --> 00:03:55,150
And now all we need to do is to again, use the map method and loop over this to create now a list of

62
00:03:55,150 --> 00:03:56,830
these option elements.

63
00:03:57,870 --> 00:04:04,680
So again, specifying the value and now that value is simply numb and we need the key.

64
00:04:04,770 --> 00:04:06,990
And that key is also numb.

65
00:04:07,200 --> 00:04:12,820
So remember how that when we render a list, we need to give each of the elements a unique key.

66
00:04:12,840 --> 00:04:15,870
So the number here is, of course, unique.

67
00:04:16,110 --> 00:04:18,000
And then here, also numb.

68
00:04:19,600 --> 00:04:23,440
So give that a save, which makes this a little bit more legible.

69
00:04:23,680 --> 00:04:31,180
So this option is basically just exactly what we had before here manually, but now we create it dynamically

70
00:04:31,180 --> 00:04:33,760
here automatically from 0 to 20.

71
00:04:34,030 --> 00:04:35,860
So there it is.

72
00:04:36,130 --> 00:04:43,060
So since we were speaking of this key here, let's also go to this list and fix the key there.

73
00:04:44,470 --> 00:04:50,080
So right here where we have that map, we need to also pass in the key.

74
00:04:51,510 --> 00:04:54,390
So that key again, needs to be something unique.

75
00:04:54,390 --> 00:05:00,030
And what is unique here is this ID property.

76
00:05:00,240 --> 00:05:04,020
Well, not yet, but here let's use a three.

77
00:05:04,020 --> 00:05:09,240
And so now these IDs are unique and so those are the ones we are going to use.

78
00:05:09,930 --> 00:05:14,700
So usually when we get an array of objects, each of these objects should have an ID.

79
00:05:14,970 --> 00:05:18,840
So that's then the perfect candidate for using here as a key.

80
00:05:19,080 --> 00:05:24,430
And again, we will learn later exactly what this key is and why it's so important.

81
00:05:24,450 --> 00:05:27,510
But without it, react will always complain.

82
00:05:28,900 --> 00:05:29,590
All right.

83
00:05:29,620 --> 00:05:31,660
After reloading it, it is gone.

84
00:05:31,660 --> 00:05:34,390
And so let's go back to our form.

85
00:05:35,090 --> 00:05:38,720
And the form is actually already complete at this point.

86
00:05:38,720 --> 00:05:41,120
And so let's now talk about events.

87
00:05:41,270 --> 00:05:48,050
So basically what we want to happen is when we click on this button here, we want this form to be submitted.

88
00:05:48,050 --> 00:05:53,210
And so we can then react to this form submission with an event handler.

89
00:05:53,980 --> 00:05:55,900
So let's do what I just said.

90
00:05:55,930 --> 00:06:02,710
First, let's actually create the event handler and we will do that just like before, right in the

91
00:06:02,710 --> 00:06:03,990
component function.

92
00:06:04,000 --> 00:06:09,310
So here we create another function, and this one is typically called handle.

93
00:06:10,170 --> 00:06:11,160
Submit.

94
00:06:13,290 --> 00:06:14,190
All right.

95
00:06:14,190 --> 00:06:18,610
And now all we need to do is to listen for that submit event.

96
00:06:18,630 --> 00:06:20,820
So how do you think we do that?

97
00:06:21,000 --> 00:06:27,660
Well, we go right here to this form, and then we add on submit.

98
00:06:27,750 --> 00:06:31,530
And then all we need to do is to pass in the handle.

99
00:06:32,640 --> 00:06:35,190
Submit function that we just created.

100
00:06:35,190 --> 00:06:42,090
And again, really, really important to understand is that we don't call the function here so we don't

101
00:06:42,090 --> 00:06:42,810
do this.

102
00:06:42,840 --> 00:06:48,870
Instead, react will call the function for us as soon as the Onsubmit event happens.

103
00:06:49,050 --> 00:06:53,280
Now, when exactly is that submit event going to happen?

104
00:06:53,460 --> 00:06:57,450
Well, simply as soon as we click here on this button.

105
00:06:58,680 --> 00:07:04,620
But for now, of course, nothing is happening because we don't have any logic in or handler function

106
00:07:04,620 --> 00:07:05,190
yet.

107
00:07:05,580 --> 00:07:11,670
Now another way in which a form can be submitted is by hitting the enter key while we are here in the

108
00:07:11,670 --> 00:07:12,340
submit.

109
00:07:12,360 --> 00:07:17,660
So when I'm here and I hit enter, then you see that the form got submitted actually.

110
00:07:17,670 --> 00:07:24,090
So maybe you saw that there was a brief flash of reloading and that's just a normal behavior of forms

111
00:07:24,090 --> 00:07:25,250
in HTML.

112
00:07:25,260 --> 00:07:28,290
So that has nothing to do with React.

113
00:07:28,500 --> 00:07:32,040
Now let's just do this one more time so I can show you.

114
00:07:32,680 --> 00:07:36,490
So writing test and then submitting, Watch what happens.

115
00:07:36,730 --> 00:07:43,090
So as I told you before, there was like a brief flash and then the page actually reloaded.

116
00:07:43,090 --> 00:07:45,340
And so the text that we got here is gone.

117
00:07:45,610 --> 00:07:51,970
Now, remember that whole conversation about the single page application where I mentioned that in a

118
00:07:51,970 --> 00:07:58,090
single page application like we want to build with React, we usually can submit a form without the

119
00:07:58,090 --> 00:07:59,080
page reloading.

120
00:07:59,080 --> 00:08:03,730
So in other words, what we want is for this page not to reload.

121
00:08:03,730 --> 00:08:07,750
And so we need to disable this default behavior of HTML.

122
00:08:08,750 --> 00:08:12,920
So the way we do that is to accept the event here.

123
00:08:14,280 --> 00:08:19,800
And then here we can use event dot prevent default.

124
00:08:20,010 --> 00:08:23,250
And again, this is normal JavaScript right here.

125
00:08:23,370 --> 00:08:29,910
So if you're used to working with forms in vanilla JavaScript, then you probably have seen this before.

126
00:08:31,790 --> 00:08:34,940
So let's see what happens now when we submit.

127
00:08:34,970 --> 00:08:35,480
Yeah.

128
00:08:35,480 --> 00:08:36,890
Then nothing happens.

129
00:08:36,890 --> 00:08:39,110
So that's actually exactly what we want.

130
00:08:39,140 --> 00:08:43,640
Now we want no reload, so we want to stay here on the same page.

131
00:08:43,640 --> 00:08:46,910
So building a single page application.

132
00:08:47,540 --> 00:08:49,880
Now, what's with this e here?

133
00:08:49,880 --> 00:08:51,740
Actually, how does it get here?

134
00:08:51,980 --> 00:08:57,920
Well, as soon as the submit event happens, React will call this handle submit function.

135
00:08:57,920 --> 00:09:02,840
And when it does so, it will pass into the function, the event object.

136
00:09:02,840 --> 00:09:06,370
So an object with all the information about the current event.

137
00:09:06,380 --> 00:09:10,970
So again, that's very similar to what happens already in vanilla JavaScript.

138
00:09:12,170 --> 00:09:13,640
So here we could also.

139
00:09:14,450 --> 00:09:15,800
Basically right this.

140
00:09:17,180 --> 00:09:21,790
So this would be exactly the same, but it's then a bit more obvious what happens.

141
00:09:21,800 --> 00:09:28,010
So here this function gets the event and then we call Handlesubmit with that event.

142
00:09:28,790 --> 00:09:30,420
But that's kind of redundant.

143
00:09:30,440 --> 00:09:32,030
So let's remove that.

144
00:09:33,210 --> 00:09:39,690
So let's just quickly recap what we did here, which was actually not a lot, but it's still important

145
00:09:39,690 --> 00:09:41,730
to understand what happened here.

146
00:09:42,290 --> 00:09:46,550
So first of all, we just created or form elements.

147
00:09:46,550 --> 00:09:52,610
And then the important part is that we are listening now for the submit event that happens on the form

148
00:09:52,610 --> 00:09:55,100
and that event happens on the form.

149
00:09:55,100 --> 00:10:01,250
As soon as we click this button or as soon as we hit enter while we are in this input element.

150
00:10:01,250 --> 00:10:05,510
And again, that is just some normal behavior of HTML.

151
00:10:05,810 --> 00:10:14,480
Now we could also not listen to the Submit event and instead listen for on click right here so we could

152
00:10:14,480 --> 00:10:15,080
do.

153
00:10:15,800 --> 00:10:16,760
Like this.

154
00:10:16,790 --> 00:10:21,200
And then, for example, create a function handle click.

155
00:10:21,440 --> 00:10:23,720
So instead of handle submit.

156
00:10:23,750 --> 00:10:28,610
So that would also work, but it would only work on the click of the button.

157
00:10:28,790 --> 00:10:32,810
So that would then not work when we hit enter while here.

158
00:10:33,110 --> 00:10:34,850
But we do actually want that.

159
00:10:34,850 --> 00:10:38,630
And so let's instead listen for the submit event.

160
00:10:38,960 --> 00:10:43,400
And by doing so, we are leveraging the power of HTML forms.

161
00:10:44,270 --> 00:10:50,780
Now, the next question is how do we actually get this data from the form into this event?

162
00:10:50,810 --> 00:10:52,160
Handler Right.

163
00:10:52,160 --> 00:10:55,940
Because, of course, the goal is to do something with this data.

164
00:10:55,940 --> 00:10:59,810
So with this quantity and with this item description.

165
00:11:00,420 --> 00:11:03,020
Well, there are multiple ways of doing so.

166
00:11:03,030 --> 00:11:06,780
So we could get that data right from the event object.

167
00:11:07,390 --> 00:11:08,830
So let's just see.

168
00:11:09,040 --> 00:11:13,840
We could, like, log this event to the console.

169
00:11:14,260 --> 00:11:15,850
So let's see what happens.

170
00:11:16,840 --> 00:11:23,710
So here we get this synthetic base event and we will talk about what this synthetic event is a bit later.

171
00:11:24,040 --> 00:11:26,320
But you see that here we get the target.

172
00:11:26,380 --> 00:11:30,460
So basically the element on which the event was fired.

173
00:11:30,460 --> 00:11:35,960
And then there we have, for example, the input on which we can see the value.

174
00:11:35,980 --> 00:11:39,820
So test is exactly what we have here, right?

175
00:11:40,060 --> 00:11:43,180
However, in React, we usually don't do this.

176
00:11:43,210 --> 00:11:49,420
Instead, we use something called controlled elements, but that's a topic for a whole new video.

177
00:11:49,420 --> 00:11:52,720
And so let's now take a break and come back in a second.
