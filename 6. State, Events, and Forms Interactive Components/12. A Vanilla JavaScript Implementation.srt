1
00:00:00,850 --> 00:00:08,170
So to finish up this part, I want to once again do a quick comparison of the React code that we just

2
00:00:08,170 --> 00:00:14,040
wrote with an equivalent vanilla JavaScript implementation of the same app.

3
00:00:15,190 --> 00:00:22,210
And this vanilla JavaScript implementation I actually gave you at the beginning of this section.

4
00:00:22,420 --> 00:00:25,520
So we placed it right in the public folder.

5
00:00:25,540 --> 00:00:29,920
So let's now open that up and open it here on the side.

6
00:00:31,590 --> 00:00:32,370
Okay.

7
00:00:32,580 --> 00:00:39,930
So again, the vanilla JavaScript implementation is inside an HTML file where here we have first the

8
00:00:40,080 --> 00:00:43,140
HTML and then separated the JavaScript.

9
00:00:44,160 --> 00:00:49,290
So this might look familiar as it is quite similar, of course, to this.

10
00:00:50,340 --> 00:00:55,020
The only thing we don't have here is the button to open and close the component.

11
00:00:55,020 --> 00:00:56,910
So I didn't include that part.

12
00:00:57,420 --> 00:01:01,170
But anyway here then starts or script.

13
00:01:01,170 --> 00:01:02,670
So we have the same messages.

14
00:01:02,700 --> 00:01:08,970
And then here we have to manually select all of these Dom elements based on the classes that we gave

15
00:01:08,970 --> 00:01:09,450
them.

16
00:01:11,390 --> 00:01:18,530
Then next we have this let variable here with the step, which we will then update down here in these

17
00:01:18,530 --> 00:01:20,010
eventhandler functions.

18
00:01:20,030 --> 00:01:25,310
So here we took the elements that we selected manually and used add event listener on them.

19
00:01:25,340 --> 00:01:31,610
We have a similar logic inside of these event handlers to basically update the step variable.

20
00:01:31,610 --> 00:01:38,690
So when we go back, the step goes minus one and when we go forward, the step goes plus one.

21
00:01:38,690 --> 00:01:42,140
So this is a bit similar to what we have here.

22
00:01:42,140 --> 00:01:44,180
So these event handlers.

23
00:01:44,270 --> 00:01:50,600
But the big difference is that here all we have to do is to just update the state and so then React

24
00:01:50,600 --> 00:01:52,630
will keep the UI in sync.

25
00:01:52,640 --> 00:01:59,030
Where here we first update the state variable and then we have to call this function which does the

26
00:01:59,060 --> 00:02:00,260
Dom manipulation.

27
00:02:00,790 --> 00:02:07,570
So here inside of the update values function, we need to now manually update the Dom and keep it in

28
00:02:07,570 --> 00:02:15,250
sync with the step state because of course, as soon as we click these buttons here, if all we did

29
00:02:15,280 --> 00:02:18,910
was to update this value, then nothing would happen in the UI.

30
00:02:19,090 --> 00:02:22,690
So after doing that, we need to then call this function here.

31
00:02:22,780 --> 00:02:27,310
Or of course we could also just have all of this code here.

32
00:02:27,310 --> 00:02:32,350
But since we need the same code here, I just placed it into this function.

33
00:02:33,580 --> 00:02:37,960
So then here we manually update the text content of the message.

34
00:02:37,960 --> 00:02:42,690
While here in the JSX, it is simply declared right in the markup.

35
00:02:42,700 --> 00:02:48,390
So here we have imperative code that tells JavaScript step by step what it needs to do.

36
00:02:48,400 --> 00:02:55,930
So update the text content, then set the class list, set this class list and set this class list.

37
00:02:55,930 --> 00:03:02,190
So set the class to active in case that the step is currently active while here.

38
00:03:02,200 --> 00:03:04,390
That's all just declared in the JSX.

39
00:03:05,230 --> 00:03:08,140
We don't tell react to do anything.

40
00:03:08,140 --> 00:03:10,600
We just write that here.

41
00:03:10,630 --> 00:03:16,780
The step should be equal to the current step and that here the active class should be inside the class

42
00:03:16,780 --> 00:03:19,390
name if the step is greater equal one.

43
00:03:19,390 --> 00:03:24,010
What we don't need the imperative dummy stipulation that we have here.

44
00:03:24,920 --> 00:03:27,530
So we talked about this now many times.

45
00:03:27,530 --> 00:03:30,350
And so I think that this is enough set at this point.

46
00:03:30,350 --> 00:03:33,800
But of course, it would be a good idea for you to keep comparing.

47
00:03:33,800 --> 00:03:40,730
Now these two implementations, there's just one small thing that I want to do here, which is going

48
00:03:40,730 --> 00:03:48,020
back to the previous lecture where I told you that each component has and manages its own state.

49
00:03:48,110 --> 00:03:52,220
So what I want to do now is to prove that to you in code.

50
00:03:52,990 --> 00:03:59,260
So let's actually take all of this code and place it into a new component, which we will call step.

51
00:04:00,210 --> 00:04:07,140
Or actually let's call this component here step, then we don't have to do so much copy pasting.

52
00:04:08,920 --> 00:04:12,370
Then let's remove this and actually call it steps.

53
00:04:14,070 --> 00:04:14,730
All right.

54
00:04:14,730 --> 00:04:17,130
And now here we do our app again.

55
00:04:17,130 --> 00:04:19,440
So export default.

56
00:04:20,860 --> 00:04:21,820
A function.

57
00:04:22,740 --> 00:04:25,290
App and then this app.

58
00:04:26,190 --> 00:04:29,340
Will basically include two steps.

59
00:04:31,160 --> 00:04:34,400
So let's say here we have a div and then we want to have.

60
00:04:37,050 --> 00:04:38,760
The steps to time.

61
00:04:38,850 --> 00:04:41,550
Now, just a few more changes we need to do.

62
00:04:41,580 --> 00:04:49,530
So now, since we have two components on the same page, let's actually return a div here so that the

63
00:04:49,560 --> 00:04:54,210
button and then these steps are all in the same place.

64
00:04:56,920 --> 00:05:00,640
And then just one quick change in the CSS, please.

65
00:05:00,700 --> 00:05:05,230
So down here in the close, let's just remove this line of code.

66
00:05:07,490 --> 00:05:10,250
All right, let's close that.

67
00:05:10,400 --> 00:05:11,890
Put it here on the side.

68
00:05:11,900 --> 00:05:16,780
And then as you reload, you will see that now we have two steps on the page.

69
00:05:16,790 --> 00:05:20,900
So we successfully reused our steps component.

70
00:05:21,510 --> 00:05:23,240
So this is now no longer the app.

71
00:05:23,250 --> 00:05:27,150
Again, it is steps and we can nicely see that here.

72
00:05:28,100 --> 00:05:30,320
And react dev tools.

73
00:05:30,650 --> 00:05:33,750
So now we have a bit of a bigger component tree.

74
00:05:33,770 --> 00:05:37,490
So we have app and then it has two child components.

75
00:05:38,960 --> 00:05:45,050
So but what I wanted to show you is that as we change the state in this one, for example, the state

76
00:05:45,050 --> 00:05:47,240
here will stay the same.

77
00:05:47,240 --> 00:05:54,380
And so even though both of them are steps component, the state in each of them is completely isolated.

78
00:05:54,740 --> 00:05:59,120
So of course, I can also close this one and this one stays open.

79
00:05:59,770 --> 00:06:03,340
And we can obviously also see that down here in the dev tools.

80
00:06:04,460 --> 00:06:06,380
With a bit more space even.

81
00:06:07,580 --> 00:06:08,060
Yeah.

82
00:06:08,060 --> 00:06:11,980
So the first steps here, the state is three and it is visible.

83
00:06:11,990 --> 00:06:17,480
So that's this true here while the second one, the state is one and it is not visible.

84
00:06:17,780 --> 00:06:18,260
Okay.

85
00:06:18,260 --> 00:06:22,100
So that was just a small and quick demonstration.

86
00:06:22,190 --> 00:06:29,000
And so now that we have used state a couple of times here, it's time for you to practice state on your

87
00:06:29,000 --> 00:06:31,790
own in the upcoming coding challenge.
