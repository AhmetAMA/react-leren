1
00:00:00,900 --> 00:00:08,670
Let's now implement a new small feature which will require us to listen globally to a key press event.

2
00:00:10,010 --> 00:00:14,220
So let's check out what that feature is in our demo.

3
00:00:14,240 --> 00:00:21,080
And so basically, it's very simple when we open up a movie here to see the details instead of clicking

4
00:00:21,080 --> 00:00:27,350
here on this button to go back, we want to now implement the feature that the user can also just click

5
00:00:27,350 --> 00:00:28,790
on the escape key.

6
00:00:28,910 --> 00:00:30,260
So you can see that.

7
00:00:30,260 --> 00:00:31,610
But I'm doing it now.

8
00:00:32,250 --> 00:00:36,220
And so with this, the movie detail was then closed.

9
00:00:36,240 --> 00:00:43,590
And so again, for that, we basically need to globally listen to that key press event.

10
00:00:43,860 --> 00:00:46,150
So let's get to work.

11
00:00:46,170 --> 00:00:53,670
And the way in which we can react to a key press event in the entire app is basically by simply attaching

12
00:00:53,670 --> 00:00:56,820
an event listener to the entire document.

13
00:00:57,970 --> 00:01:01,690
So let's do that here right in the app component.

14
00:01:01,690 --> 00:01:09,010
And so since this is clearly a side effect because we will be directly touching the Dom, we need another

15
00:01:09,010 --> 00:01:09,760
effect.

16
00:01:11,190 --> 00:01:16,110
So just to show you that we are indeed in the app component.

17
00:01:16,440 --> 00:01:19,770
And so let's create that effect right here.

18
00:01:20,810 --> 00:01:22,490
So use effect.

19
00:01:23,870 --> 00:01:25,460
Then our effect function.

20
00:01:25,820 --> 00:01:33,890
And then as always, we start by saying basically that this effect should run on Mt..

21
00:01:34,010 --> 00:01:42,770
And so now all we need to do is to write document, dot add event listener, which remember is simply

22
00:01:42,770 --> 00:01:44,180
a Dom function.

23
00:01:44,180 --> 00:01:48,440
So we are really doing basically now some Dom manipulation.

24
00:01:48,440 --> 00:01:56,060
And so we are stepping really outside of react here, which is the reason why the React team also calls

25
00:01:56,060 --> 00:01:59,120
the use effect hook here an escape hatch.

26
00:01:59,120 --> 00:02:05,300
So basically a way of escaping, having to write all the code using the react way.

27
00:02:06,870 --> 00:02:07,530
Okay.

28
00:02:08,530 --> 00:02:12,520
But anyway, here, let's now listen for the key down.

29
00:02:13,630 --> 00:02:17,050
Event and then as our callback function here.

30
00:02:18,250 --> 00:02:26,740
We just passed in a function which receives the event and now we can simply say if the event dot code,

31
00:02:26,920 --> 00:02:30,220
which is basically the code of the key press.

32
00:02:31,210 --> 00:02:34,000
So if that is equal escape.

33
00:02:35,320 --> 00:02:40,600
Then we will want to call our handle close movie function.

34
00:02:41,590 --> 00:02:43,980
So we already have that functionality.

35
00:02:43,990 --> 00:02:48,580
And so all we have to do is to call that function right here.

36
00:02:49,270 --> 00:02:55,150
And let's also, just for some experiment, log here, something to the console.

37
00:02:56,590 --> 00:02:58,270
So just like this.

38
00:03:01,740 --> 00:03:03,090
And let's reload here.

39
00:03:03,180 --> 00:03:09,270
But let's first actually come back to our network and disable any throttling.

40
00:03:10,200 --> 00:03:11,670
So let's reload.

41
00:03:11,700 --> 00:03:17,340
Then let's open up a movie and then let's see what happens when I hit the escape key.

42
00:03:17,950 --> 00:03:24,940
And indeed, the movie here was closed and we also got our closing logged to the console.

43
00:03:25,270 --> 00:03:29,800
But watch what happens right now as I hit the escape key again.

44
00:03:30,800 --> 00:03:34,670
So you see, we get closing again and actually even twice.

45
00:03:34,670 --> 00:03:40,250
But again, that's simply because in strict mode, these effects here are running twice.

46
00:03:41,480 --> 00:03:50,030
So again, as I keep hitting the escape key, we see here by this log that actually this callback function

47
00:03:50,030 --> 00:03:50,450
here.

48
00:03:50,450 --> 00:03:57,740
So the event listener is still listening for the Keydown event and it will then execute this function

49
00:03:57,740 --> 00:04:05,360
each time that the keypress happens, which is however, not really what we want in this situation because

50
00:04:05,360 --> 00:04:08,420
we actually don't even have a movie opened here.

51
00:04:09,480 --> 00:04:17,520
So basically what we want instead is to only attach this event listener here to the document whenever

52
00:04:17,520 --> 00:04:21,290
we actually have the movie details in our tree.

53
00:04:21,300 --> 00:04:25,260
So whenever that component instance is actually mounted.

54
00:04:26,190 --> 00:04:28,080
So that's easy enough.

55
00:04:28,080 --> 00:04:30,510
We just cut the effect from here.

56
00:04:30,900 --> 00:04:36,300
And so after all, we want it in our movie details component.

57
00:04:37,530 --> 00:04:38,360
All right.

58
00:04:38,370 --> 00:04:43,830
I just started to place it there so that we could understand why we actually need it here.

59
00:04:45,170 --> 00:04:52,100
And now here, of course, this function is called on Close Movie, which again, we had already passed

60
00:04:52,100 --> 00:04:54,470
into this component right here.

61
00:04:55,160 --> 00:04:59,510
Now here you see that actually Eslint is complaining.

62
00:04:59,510 --> 00:05:06,110
And the reason for that is that we must actually include this function here also in our dependency array.

63
00:05:06,350 --> 00:05:08,900
So that doesn't seem to make a lot of sense.

64
00:05:08,900 --> 00:05:11,720
But we will later learn why that is.

65
00:05:12,360 --> 00:05:18,930
So again, when React tells us that we need to include something here in the array, we actually must

66
00:05:18,930 --> 00:05:19,740
do that.

67
00:05:20,500 --> 00:05:25,250
Otherwise there might be some consequences that we do not want.

68
00:05:25,270 --> 00:05:31,720
And so, again, whenever you see some warning here coming from Eslint about a missing dependency,

69
00:05:31,750 --> 00:05:33,940
you must include that in the array.

70
00:05:33,970 --> 00:05:41,350
So otherwise React says that you are lying about your dependencies and that of course we don't want.

71
00:05:42,070 --> 00:05:49,750
But anyway, let's now try to hit the escape key again while the movie details component is not mounted.

72
00:05:49,930 --> 00:05:54,070
And so now we didn't get that console dot log.

73
00:05:54,310 --> 00:05:57,990
So therefore, now this function is of course not being executed.

74
00:05:58,000 --> 00:06:04,600
But as I open up the movie and then I hit the key again, then you see that we get the closing log.

75
00:06:04,630 --> 00:06:07,000
And of course the movie has closed.

76
00:06:08,200 --> 00:06:10,090
Okay, let's do that again.

77
00:06:10,890 --> 00:06:15,840
And notice how now we are getting even more of these logs here.

78
00:06:16,510 --> 00:06:19,630
And let's clean that and do that again.

79
00:06:20,440 --> 00:06:21,970
And a few more times.

80
00:06:22,990 --> 00:06:29,170
And so you see that we get dozens of these logs here saying closing, which don't really seem to make

81
00:06:29,170 --> 00:06:30,100
much sense.

82
00:06:31,090 --> 00:06:38,050
So if we reload the page and then do that again, then we are back to only having these two logs, which

83
00:06:38,080 --> 00:06:42,310
again come because the effect is executed twice.

84
00:06:42,980 --> 00:06:48,710
But now if I close another movie, then all of a sudden we get three locks.

85
00:06:48,770 --> 00:06:53,810
And so it seems like these are basically accumulating, right?

86
00:06:54,600 --> 00:07:02,730
So the reason for that is that actually each time that a new movie details component mounts, a new

87
00:07:02,730 --> 00:07:05,420
event listener is added to the document.

88
00:07:05,430 --> 00:07:10,020
So basically always an additional one to the ones that we already have.

89
00:07:10,860 --> 00:07:18,270
So again, each time that this effect here is executed, it will basically add one more event listener

90
00:07:18,270 --> 00:07:19,440
to the document.

91
00:07:19,440 --> 00:07:26,040
And so if we open up ten movies and then close them all, we will end up with ten of the same event

92
00:07:26,040 --> 00:07:31,370
listeners attached to the document, which of course is not what we want.

93
00:07:31,380 --> 00:07:37,980
And so what this means is that here we also need to clean up our event listeners.

94
00:07:38,660 --> 00:07:42,410
Or in other words, we need to return a function here.

95
00:07:46,400 --> 00:07:48,590
Which will call.

96
00:07:49,870 --> 00:07:53,500
Or ritual execute document dot remove.

97
00:07:54,420 --> 00:07:55,360
Event listener.

98
00:07:55,740 --> 00:08:02,400
So basically as soon as the movie details component Unmounts, the event listener will then again be

99
00:08:02,400 --> 00:08:04,830
removed from the document.

100
00:08:05,130 --> 00:08:11,910
And so then we will avoid having so many event listeners in our Dom which might become a memory problem

101
00:08:11,910 --> 00:08:18,200
in a larger application with like hundreds or thousands of event listeners.

102
00:08:18,210 --> 00:08:24,240
So again, in this small app, of course this wouldn't be a problem, but this is just to teach you.

103
00:08:24,480 --> 00:08:28,350
So to prepare you for the real life later.

104
00:08:29,140 --> 00:08:31,630
Now here the function that we pass in.

105
00:08:31,960 --> 00:08:38,590
So the one that we want to remove must be exactly the same as here in the Add event listener.

106
00:08:38,590 --> 00:08:42,660
And so we cannot simply copy and paste this function right here.

107
00:08:42,670 --> 00:08:45,010
So it must be again the same.

108
00:08:45,010 --> 00:08:46,750
And so let's cut it from here.

109
00:08:47,900 --> 00:08:50,690
And create a brand new function here.

110
00:08:51,050 --> 00:08:54,350
Let's just give it a name of callback.

111
00:08:55,880 --> 00:08:58,370
And then let's use that here.

112
00:08:58,990 --> 00:09:00,850
And here.

113
00:09:01,830 --> 00:09:02,910
Give it a save.

114
00:09:03,180 --> 00:09:05,070
Let's reload here.

115
00:09:06,480 --> 00:09:07,080
Okay.

116
00:09:07,800 --> 00:09:08,730
Hit escape.

117
00:09:09,370 --> 00:09:11,770
And let's try it a couple more times.

118
00:09:11,920 --> 00:09:18,660
And you see that now we only get one closing each time that I hit the escape key.

119
00:09:18,670 --> 00:09:25,780
Or in other words, actually, our event listener is only executed exactly once, which was exactly

120
00:09:25,780 --> 00:09:28,570
the goal of our cleanup function here.

121
00:09:29,490 --> 00:09:30,410
Great.

122
00:09:30,420 --> 00:09:35,340
So this is how we handle key press events in a React application.

123
00:09:35,400 --> 00:09:43,720
So again, we need to basically step out of the React way and back into like classical Dom stuff.

124
00:09:43,740 --> 00:09:46,660
And so for that we need an effect.

125
00:09:46,680 --> 00:09:48,570
So we specified our effect.

126
00:09:48,600 --> 00:09:56,040
We listen for the event and each time that the component unmounts or even each time that it rerenders,

127
00:09:56,070 --> 00:10:00,630
we will then remove the old event listener from the document.

128
00:10:01,560 --> 00:10:02,400
All right.

129
00:10:02,400 --> 00:10:07,290
And this is actually going to be the last lecture of this section.

130
00:10:07,290 --> 00:10:13,590
And so let's clean up the application here a little bit before we leave this section, even though we

131
00:10:13,590 --> 00:10:16,920
will actually keep working on it in the next one.

132
00:10:16,920 --> 00:10:24,540
But still, let's do some stuff here now, which is to, for example, remove all of these redundant

133
00:10:24,660 --> 00:10:27,330
and unnecessary console.logs.

134
00:10:28,540 --> 00:10:30,670
We also have some other clean up here.

135
00:10:31,670 --> 00:10:32,690
Like this.

136
00:10:32,840 --> 00:10:34,040
So this one we don't need.

137
00:10:34,070 --> 00:10:40,490
But maybe let's just comment this one out because this was nice for the explanation of the closure.

138
00:10:40,490 --> 00:10:41,450
Remember?

139
00:10:41,630 --> 00:10:49,520
And then, of course, also when we open up the app, of course, we don't want to display search results

140
00:10:49,520 --> 00:10:51,680
for a predefined movie.

141
00:10:51,680 --> 00:10:55,430
So in this case, for the Inception movie.

142
00:10:56,890 --> 00:11:03,610
So let's remove that from state and simply start with no search term at all.

143
00:11:05,290 --> 00:11:06,550
All right, then.

144
00:11:06,550 --> 00:11:06,940
Here.

145
00:11:06,940 --> 00:11:10,840
We should probably not lock these errors.

146
00:11:12,630 --> 00:11:16,160
Here as console.error, but as a console.log.

147
00:11:16,170 --> 00:11:23,820
And also when the error is an abort error, we don't even need to log anything because again, for us

148
00:11:23,820 --> 00:11:26,700
those are actually not really errors.

149
00:11:26,730 --> 00:11:30,420
And finally, let's now search for a movie here.

150
00:11:30,540 --> 00:11:34,350
So Interstellar, for example.

151
00:11:36,120 --> 00:11:36,960
All right.

152
00:11:36,960 --> 00:11:38,700
So I selected the movie.

153
00:11:38,700 --> 00:11:41,670
And now let's say that I search for something else.

154
00:11:41,940 --> 00:11:47,690
And so in this situation, I think that it would be best to close the current movie here.

155
00:11:47,700 --> 00:11:52,290
So whenever there is a new search, we simply want to close the movie.

156
00:11:52,290 --> 00:11:54,240
And so that's pretty simple.

157
00:11:54,480 --> 00:11:58,590
We just have to, before we fetch the movie, simply call.

158
00:11:59,520 --> 00:12:02,430
Handle close movie.

159
00:12:04,460 --> 00:12:05,630
And so with this.

160
00:12:07,350 --> 00:12:08,250
Let's see.

161
00:12:09,420 --> 00:12:12,060
So we open up this one and then let's search.

162
00:12:12,660 --> 00:12:15,700
Let's see what actually turns up for Jonas.

163
00:12:16,410 --> 00:12:18,300
Something about the Jonas Brothers.

164
00:12:19,000 --> 00:12:23,600
Uh, yeah, but anyway, you saw that as I did a new search.

165
00:12:23,610 --> 00:12:26,910
Then the movie here actually disappeared.

166
00:12:26,910 --> 00:12:28,530
And the same now again.

167
00:12:30,360 --> 00:12:31,070
Okay.

168
00:12:31,080 --> 00:12:34,160
Now as we load the application right now.

169
00:12:34,170 --> 00:12:41,190
So on the initial render of the entire app, we notice that right now we are no longer fetching any

170
00:12:41,190 --> 00:12:42,870
data, right?

171
00:12:42,870 --> 00:12:49,910
So we are only fetching data as a result of searching here for movies in the search bar.

172
00:12:49,920 --> 00:12:53,370
So basically only as a response to this event.

173
00:12:53,370 --> 00:13:01,050
And so therefore we could now actually transform this use effect that we have here into a regular event

174
00:13:01,080 --> 00:13:02,130
handler function.

175
00:13:02,130 --> 00:13:07,980
Because remember, that is actually the preferred way of handling events in React.

176
00:13:07,980 --> 00:13:13,980
And again, this is actually now more of an event handler than anything else.

177
00:13:15,100 --> 00:13:15,730
Right.

178
00:13:15,730 --> 00:13:22,030
So again, if you think about that, then maybe you come to the same conclusion that maybe this shouldn't

179
00:13:22,030 --> 00:13:25,500
be an effect anymore and really an event handler function.

180
00:13:25,510 --> 00:13:28,630
So if you want, you can go ahead and convert that.

181
00:13:28,630 --> 00:13:35,590
But it's also not really necessary because the main point of this section here was to learn about the

182
00:13:35,590 --> 00:13:36,790
use effect hook.

183
00:13:36,790 --> 00:13:42,370
And in many situations we do actually want to start fetching on mount.

184
00:13:42,370 --> 00:13:50,380
And so in those situations, this is still a perfectly valid way of doing that, at least in small applications

185
00:13:50,380 --> 00:13:51,460
like this one.

186
00:13:52,190 --> 00:13:55,850
But anyway, with this, we wrap up the section.

187
00:13:55,850 --> 00:14:02,960
And so now all that's left to do is, as always, a nice coding challenge so that you can practice on

188
00:14:02,960 --> 00:14:03,710
your own.
