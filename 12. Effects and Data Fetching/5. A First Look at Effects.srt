1
00:00:00,880 --> 00:00:09,010
So we just used the use effect hook for the very first time in order to fetch movie data as the component

2
00:00:09,010 --> 00:00:09,850
mounts.

3
00:00:09,880 --> 00:00:16,330
But what actually is an effect and how is it different from an event handler function?

4
00:00:16,480 --> 00:00:19,660
Well, let's find out in this video.

5
00:00:20,430 --> 00:00:26,580
And just so we're all on the same page, let's start by reviewing what a side effect is.

6
00:00:26,940 --> 00:00:35,640
So basically, in React, a side effect is any interaction between a react component and the world outside

7
00:00:35,640 --> 00:00:36,870
that component.

8
00:00:36,960 --> 00:00:43,230
And we can think of a side effect as some code that actually makes something useful happen.

9
00:00:43,230 --> 00:00:46,800
For example, fetching data from some API.

10
00:00:47,470 --> 00:00:54,790
So what this means is that we actually need side effects all the time when we build React apps.

11
00:00:55,030 --> 00:01:02,890
Now, we already know that side effects should not happen during the component render or in other words,

12
00:01:02,920 --> 00:01:06,670
side effects should not be in render logic.

13
00:01:06,790 --> 00:01:14,800
Instead, we can create side effects in two different places in React, and the first one is inside

14
00:01:14,800 --> 00:01:16,120
event handlers.

15
00:01:16,120 --> 00:01:22,570
And remember that event handlers are simply functions that are triggered whenever the event that they

16
00:01:22,570 --> 00:01:24,610
are listening to happens.

17
00:01:25,230 --> 00:01:32,040
However, simply reacting to events is sometimes not enough for what an application needs.

18
00:01:32,250 --> 00:01:39,360
Instead, in some situations, we need to write some code that will be executed automatically as the

19
00:01:39,360 --> 00:01:40,950
component renders.

20
00:01:40,950 --> 00:01:47,820
And so this is when we can create a so called effect by using the use effect hook.

21
00:01:47,940 --> 00:01:55,290
So by creating an effect, we can basically write code that will run at different moments of a component

22
00:01:55,290 --> 00:01:57,050
instance lifecycle.

23
00:01:57,060 --> 00:02:05,640
So when the component mounts, when it rerenders or even when it unmounts And this is really great because

24
00:02:05,640 --> 00:02:09,390
it opens up a whole new door of possibilities.

25
00:02:09,990 --> 00:02:10,560
Okay.

26
00:02:10,560 --> 00:02:19,110
But let's now get just a bit deeper into how effects work by comparing event handlers to effects created

27
00:02:19,110 --> 00:02:20,850
with the use effect hook.

28
00:02:21,030 --> 00:02:26,560
And let's go back to the example of fetching movie data that we have been using.

29
00:02:26,860 --> 00:02:35,680
So fetching movie data is very clearly a side effect because it's clearly an interaction with the world

30
00:02:35,710 --> 00:02:37,360
outside the component.

31
00:02:37,910 --> 00:02:43,970
Now there are two different possibilities of when we might want to create this side effect.

32
00:02:44,090 --> 00:02:50,900
The first possibility is that we might want to fetch movie data only when a certain event happens.

33
00:02:51,140 --> 00:02:56,080
So in that case we would of course just use an event handler function.

34
00:02:56,090 --> 00:03:02,240
So just like we have been doing up until this point, I mean, we haven't been using event handlers

35
00:03:02,240 --> 00:03:06,380
to fetch data, but we have used them for other stuff.

36
00:03:06,920 --> 00:03:14,060
Now, the other possibility of when to fetch the data would be to do so immediately after the component

37
00:03:14,060 --> 00:03:17,300
mounts, so after it is first rendered.

38
00:03:17,300 --> 00:03:24,800
And so this is exactly what we did in the previous lecture when we first used the use event hook to

39
00:03:24,800 --> 00:03:31,280
specify an effect that was executed right after the component was painted to the screen.

40
00:03:31,670 --> 00:03:37,610
So we can say that these two pieces of code produce the exact same result.

41
00:03:37,610 --> 00:03:44,060
So they both fetch data about a movie, but they do so at different moments in time.

42
00:03:44,180 --> 00:03:51,680
So the event handler executes when an event happens and the effect executes whenever the component first

43
00:03:51,680 --> 00:03:52,550
renders.

44
00:03:52,550 --> 00:04:00,050
At least in this situation, because the exact moment at which the effect is executed actually depends

45
00:04:00,050 --> 00:04:04,970
on its dependency array, which I shortly mentioned in the last video.

46
00:04:05,090 --> 00:04:13,740
So we can basically use this dependency array to tell the effect to also run after a component Rerenders

47
00:04:13,740 --> 00:04:19,620
But I won't go deep into this right now because that's easier to explain with code.

48
00:04:19,890 --> 00:04:28,590
But speaking of the dependency array, this array is just one of three parts that any effect can have.

49
00:04:28,900 --> 00:04:37,300
So besides the dependency array, we have, of course the effect code itself and also each effect can

50
00:04:37,300 --> 00:04:44,860
return a so-called cleanup function, which is a function that will be called before the component Rerenders

51
00:04:44,860 --> 00:04:46,420
or unmounts.

52
00:04:46,450 --> 00:04:50,930
Now thinking about different moments of the component lifecycle.

53
00:04:50,950 --> 00:04:58,780
So mounting Rerendering and Unmounting can be very helpful to understand how effects work.

54
00:04:58,960 --> 00:05:05,230
However, we should actually not think about life cycles, but about synchronization.

55
00:05:05,530 --> 00:05:13,240
So the real reason why effects exist is not to run code at different points of the life cycle, but

56
00:05:13,240 --> 00:05:17,440
to keep a component synchronized with some external system.

57
00:05:17,590 --> 00:05:24,760
So in this example, that would be to keep the component in sync with the movie data that comes from

58
00:05:24,760 --> 00:05:26,680
some external API.

59
00:05:26,890 --> 00:05:34,160
And if that sounds super confusing, keep in mind that this is just a first introduction to effects.

60
00:05:34,190 --> 00:05:38,630
We will come back to all this after having used the use effect.

61
00:05:38,660 --> 00:05:40,970
Took a bit more in practice.

62
00:05:41,240 --> 00:05:48,710
But anyway, to finish our comparison here, as we just learned, we use effects to keep a component

63
00:05:48,710 --> 00:05:56,240
in sync with the external world, while on the other hand, we use event handlers to react to a certain

64
00:05:56,240 --> 00:05:59,480
event that happened in the user interface.

65
00:05:59,660 --> 00:06:06,830
Now, what's very important to note here is that event handlers are always the preferred way of creating

66
00:06:06,830 --> 00:06:07,970
side effects.

67
00:06:08,180 --> 00:06:13,190
So whenever possible, we should not overuse the use effect hook.

68
00:06:13,310 --> 00:06:20,270
So basically everything that can be handled inside event handlers should be handled there.
