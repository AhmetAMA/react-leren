1
00:00:00,880 --> 00:00:06,160
We learned before that state is the most important concept in React.

2
00:00:06,190 --> 00:00:12,910
Therefore, managing state is the most important aspect when it comes to thinking in React.

3
00:00:12,910 --> 00:00:18,580
And so let's not talk about the fundamentals of state management in React.

4
00:00:19,920 --> 00:00:27,180
So as you already know, we can use the use state function to create multiple pieces of state in order

5
00:00:27,180 --> 00:00:31,590
to track data that changes over the lifecycle of an application.

6
00:00:31,620 --> 00:00:38,820
Here we have many examples of state in the Udemy application that you are familiar with and if you want,

7
00:00:38,820 --> 00:00:42,090
you can pause the video and quickly analyze this.

8
00:00:42,300 --> 00:00:47,040
Now all this looks like a bit of a mess, right?

9
00:00:47,250 --> 00:00:54,420
Like, how do we know that we even need all of these pieces of state and how do we know where exactly

10
00:00:54,420 --> 00:00:56,790
to place them inside the code?

11
00:00:56,820 --> 00:01:00,840
Well, that's where state management comes into play.

12
00:01:01,020 --> 00:01:06,000
Now, state management can be defined in different ways by different people.

13
00:01:06,000 --> 00:01:12,780
But I like to think of state management as deciding when we need to create new pieces of state.

14
00:01:12,810 --> 00:01:21,370
What types of state we need, where to place each piece of state inside our code base, and also how

15
00:01:21,370 --> 00:01:24,130
all that data should flow through the app.

16
00:01:24,340 --> 00:01:31,390
And to summarize all this, I like to use the analogy that state management is basically giving each

17
00:01:31,390 --> 00:01:34,990
piece of state a home within our code base.

18
00:01:35,320 --> 00:01:41,710
Now, up until this point in our small apps, we never had to worry about state management at all.

19
00:01:41,740 --> 00:01:47,120
We simply placed each state in a component that needed it, and that's it.

20
00:01:47,140 --> 00:01:54,010
But as an application grows, the need to find the right home for each piece of state starts to become

21
00:01:54,010 --> 00:01:55,030
really important.

22
00:01:55,060 --> 00:02:02,320
No matter if that home is the component where we first need that state, some parent component or even

23
00:02:02,320 --> 00:02:03,460
global state.

24
00:02:04,410 --> 00:02:11,850
And speaking of global state, let's actually analyze the difference between the big two types of state

25
00:02:11,880 --> 00:02:16,740
that exist in React global, state and local state.

26
00:02:16,890 --> 00:02:20,640
Now, this will only become more important to us later on.

27
00:02:20,640 --> 00:02:26,490
But let's still start learning about this inside this thinking about state section.

28
00:02:27,070 --> 00:02:33,250
So in React, each piece of state is either local, state or global state.

29
00:02:33,580 --> 00:02:34,690
So local.

30
00:02:34,690 --> 00:02:42,670
State is state that is only needed in one component or in a few different components like child or sibling

31
00:02:42,670 --> 00:02:43,570
components.

32
00:02:43,750 --> 00:02:50,830
We simply create a piece of local state using the use state function inside a certain component, and

33
00:02:50,830 --> 00:02:57,870
that piece of state is then only accessible to that exact component and maybe to its child components

34
00:02:57,880 --> 00:03:00,370
if we pass the state using props.

35
00:03:01,020 --> 00:03:08,340
Now going back to our Udemy app, an example of local state might be the input text in the search bar.

36
00:03:08,490 --> 00:03:15,170
So probably only that component needs to know about this data and therefore this is local, state,

37
00:03:15,180 --> 00:03:18,990
so state local to that search bar component.

38
00:03:19,570 --> 00:03:21,410
Now about global state.

39
00:03:21,430 --> 00:03:26,680
This is a state that many different components in the app might need access to.

40
00:03:26,890 --> 00:03:33,880
Therefore, when we define state as being global, that piece of state will become accessible to every

41
00:03:33,880 --> 00:03:36,490
single component in the entire app.

42
00:03:36,640 --> 00:03:42,940
It's shared between all components and therefore we can also call this shared state.

43
00:03:43,240 --> 00:03:51,130
In practice we can define global state using React Context API or also an external global state management

44
00:03:51,130 --> 00:03:54,610
library like Redux that you might have heard of.

45
00:03:55,350 --> 00:04:00,780
Now in this Udemy app, one piece of global state is the shopping cart.

46
00:04:00,960 --> 00:04:05,130
So that piece of data is used all over the place here.

47
00:04:05,160 --> 00:04:12,330
So all these components need access to the shopping cart state and therefore it makes sense that this

48
00:04:12,330 --> 00:04:13,770
is global state.

49
00:04:14,350 --> 00:04:20,980
Now, this distinction between local and global state will matter more in large applications.

50
00:04:20,980 --> 00:04:27,430
So in the app we're building right now, we won't have any truly global state and we're actually going

51
00:04:27,430 --> 00:04:32,980
to keep using just local, state doing parts one and two of this course.

52
00:04:32,980 --> 00:04:40,270
And in fact, one important guideline in state management is to always start with local, state and

53
00:04:40,270 --> 00:04:44,140
only move to global state if you really, truly need it.

54
00:04:44,140 --> 00:04:49,210
And we will learn all about this in part three and four of the course.

55
00:04:49,210 --> 00:04:56,410
But for now, let's take a look at how to decide when we actually need state and where we should place

56
00:04:56,410 --> 00:04:56,890
it.

57
00:04:57,970 --> 00:05:03,540
So this light will basically be a flowchart that will help you take those decisions.

58
00:05:03,550 --> 00:05:08,020
So again, about when to create state and where to place it.

59
00:05:08,760 --> 00:05:14,070
So it all starts with you realizing that you need to store some data.

60
00:05:14,310 --> 00:05:21,660
Now, when this happens, the first question to ask is, will this data change at some point in time?

61
00:05:21,750 --> 00:05:26,950
And if the answer is no, then all you need is a regular variable.

62
00:05:26,970 --> 00:05:29,310
So probably a const variable.

63
00:05:29,550 --> 00:05:37,470
However, if the data does need to change in the future, the next question is it is possible to compute

64
00:05:37,470 --> 00:05:42,840
or to calculate this new data from an existing piece of state or props?

65
00:05:43,080 --> 00:05:46,810
If that's the case, then you should derive the state.

66
00:05:46,830 --> 00:05:52,050
So basically calculated based on an already existing state or prop.

67
00:05:52,230 --> 00:05:54,510
And this is a pretty important concept.

68
00:05:54,510 --> 00:05:59,070
So there is a separate lecture on derived state later in this section.

69
00:05:59,720 --> 00:06:03,410
However, most of the time you cannot derive state.

70
00:06:03,410 --> 00:06:10,040
And so in that case, you need to ask yourself whether updating the state should rerender the component.

71
00:06:10,310 --> 00:06:16,850
Now, we have already learned before that updating state always rerenders a component, but there is

72
00:06:16,850 --> 00:06:24,710
actually something called a ref which persists data over time like regular state but does not rerender

73
00:06:24,710 --> 00:06:25,750
a component.

74
00:06:25,760 --> 00:06:30,530
So it's basically a special type of state that we will look at later.

75
00:06:30,710 --> 00:06:36,260
Now, most of the time you actually do want state to rerender the component.

76
00:06:36,260 --> 00:06:43,220
And so what you do is to create a new piece of state using the use state function and you then place

77
00:06:43,220 --> 00:06:47,600
that new piece of state into the component that you are currently building.

78
00:06:47,600 --> 00:06:54,800
And so that's the always start with local state guideline that we talked about in the previous slide.

79
00:06:54,890 --> 00:07:00,600
And with this we have completed the decision process of when to create state.

80
00:07:01,130 --> 00:07:06,500
So again, most of the time you will just create a new piece of state using the use state hook.

81
00:07:06,500 --> 00:07:09,170
But there are also all these other cases.

82
00:07:09,170 --> 00:07:14,090
And so it's important that you are aware of when to create each of them.

83
00:07:14,730 --> 00:07:20,040
But anyway, let's now focus on where to place each new piece of state.

84
00:07:20,720 --> 00:07:28,160
So if the state variable that we just created is only used by the current component, then simply leave

85
00:07:28,160 --> 00:07:30,890
it in that component and you're done.

86
00:07:30,920 --> 00:07:34,100
So that's the end of the process right there.

87
00:07:34,400 --> 00:07:41,360
However, the state variable might also be necessary for a child component, and in that case, simply

88
00:07:41,360 --> 00:07:45,630
pass the state down into the child component by using props.

89
00:07:45,650 --> 00:07:47,900
So easy enough, right?

90
00:07:48,260 --> 00:07:56,090
Now, if the state variable is also necessary for one or a few sibling components, or even for a parent

91
00:07:56,090 --> 00:08:03,150
component of your current component, it's time to move that state to the first common parent component.

92
00:08:03,170 --> 00:08:08,080
And in React, this is what we call lifting state up.

93
00:08:08,090 --> 00:08:14,990
And this is another one of those super important topics which we will actually start using in practice

94
00:08:15,020 --> 00:08:16,550
in the next video.

95
00:08:16,640 --> 00:08:23,910
Now, finally, the state variable might be needed in even more than just a few siblings, so it might

96
00:08:23,910 --> 00:08:27,570
be necessary all over the place in the component tree.

97
00:08:27,660 --> 00:08:30,390
And what does that sound like to you?

98
00:08:30,750 --> 00:08:32,340
Well, that's right.

99
00:08:32,340 --> 00:08:35,220
That sounds just like global State.

100
00:08:35,340 --> 00:08:41,640
But since we won't need global state for some time, we will complete this diagram once we reach the

101
00:08:41,640 --> 00:08:43,860
global state management lectures.

102
00:08:44,340 --> 00:08:45,090
All right.

103
00:08:45,090 --> 00:08:51,630
So I hope that this diagram will be useful once you start building your own small apps or even throughout

104
00:08:51,630 --> 00:08:53,460
the rest of the course.

105
00:08:53,490 --> 00:09:00,300
Now, I know that this might look super confusing and like a lot of work for now, but it will become

106
00:09:00,300 --> 00:09:02,450
really intuitive over time.

107
00:09:02,460 --> 00:09:09,180
So at some point you will just automatically and intuitively know when to create a piece of state.

108
00:09:09,210 --> 00:09:16,470
You will know when to derive state from existing state and you will intuitively know when to lift state

109
00:09:16,470 --> 00:09:17,080
up.

110
00:09:17,100 --> 00:09:21,090
But this flowchart can still be quite helpful in the beginning.
