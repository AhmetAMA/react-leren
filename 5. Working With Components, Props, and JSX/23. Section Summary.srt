1
00:00:00,820 --> 00:00:07,240
Let's now take a few minutes to look back on all the concepts that we just learned throughout this section.

2
00:00:08,980 --> 00:00:16,270
So first of all, we learned that components are the building blocks of any user interface in React.

3
00:00:16,450 --> 00:00:23,980
Now, each component is a self-contained piece of the user interface, which includes its own data,

4
00:00:24,010 --> 00:00:27,640
its own JavaScript logic and its own appearance.

5
00:00:27,670 --> 00:00:34,300
Now, in practical terms, we write this appearance using a declarative syntax that's called JSX.

6
00:00:34,870 --> 00:00:41,470
And it's this block of JSX that ultimately gets returned from each component.

7
00:00:41,500 --> 00:00:49,090
And this is what's going to describe exactly what the user will see on the screen when they use the

8
00:00:49,090 --> 00:00:50,050
application.

9
00:00:50,200 --> 00:00:57,190
And any piece of JSX can contain some markup basically in the form of HTML.

10
00:00:57,430 --> 00:01:04,500
It can contain some CSS, which in this section we wrote using the style prop.

11
00:01:04,510 --> 00:01:12,260
So we use the style prop and then passed an object in there which contained some CSS code.

12
00:01:12,380 --> 00:01:20,720
And also usually the JSX contains some JavaScript inside curly braces, which I like to call entering

13
00:01:20,720 --> 00:01:22,190
the JavaScript mode.

14
00:01:22,220 --> 00:01:28,160
So this one is basically like writing JavaScript right inside of HTML.

15
00:01:28,460 --> 00:01:35,600
So this is basically everything that a component contains or can contain and it is how we write it.

16
00:01:35,630 --> 00:01:43,670
So again, using JSX is now a complete application is usually composed out of many different components

17
00:01:43,670 --> 00:01:48,320
which are then organized into a component tree like this one.

18
00:01:48,560 --> 00:01:56,420
So in a component tree like this, the components that are at the top have included or used the components

19
00:01:56,420 --> 00:02:00,740
that are below them, which makes them their parent component.

20
00:02:00,860 --> 00:02:06,800
So the components at the top, for example, here, the app component is the parent component of header

21
00:02:06,800 --> 00:02:08,600
menu and footer.

22
00:02:08,720 --> 00:02:10,490
And so these three.

23
00:02:10,520 --> 00:02:14,800
So header menu and footer are the child components of app.

24
00:02:14,810 --> 00:02:21,470
And at the same time, of course, the menu is the parent component of all the pizza components and

25
00:02:21,470 --> 00:02:25,100
the footer is the parent component of order.

26
00:02:25,220 --> 00:02:30,830
So obviously a component can be a parent and a child at the same time.

27
00:02:30,860 --> 00:02:38,210
Now, in order to share data between components, parent components can pass data into a direct child

28
00:02:38,210 --> 00:02:40,670
component using props.

29
00:02:40,790 --> 00:02:48,290
So for each value that we want to pass down, we simply define one prop which is short for property.

30
00:02:48,590 --> 00:02:53,960
And so using props, we can configure components as we wish.

31
00:02:54,080 --> 00:03:00,650
For example, in this application we rendered many different pizzas by creating one pizza component

32
00:03:00,650 --> 00:03:04,930
and then passing in different pizza objects into that component.

33
00:03:04,940 --> 00:03:08,780
So rendering it multiple times with a different prop.

34
00:03:09,330 --> 00:03:16,410
Now it's very important to understand that props can only be passed down the tree, so only from parents

35
00:03:16,410 --> 00:03:19,680
to children, but never the other way around.

36
00:03:19,920 --> 00:03:26,220
Now, something that we do all the time in React applications is to render multiple components of the

37
00:03:26,220 --> 00:03:29,000
same type by looping over an array.

38
00:03:29,010 --> 00:03:32,460
And so this is what we call creating a list.

39
00:03:32,610 --> 00:03:40,350
So in the app that we just built, we created a list of pizzas by looping over the pizza array using

40
00:03:40,350 --> 00:03:42,320
the JavaScript map method.

41
00:03:42,330 --> 00:03:46,620
And so in React, there's nothing special to create lists.

42
00:03:46,650 --> 00:03:51,780
All we need to know is the map method that's available on all JavaScript arrays.

43
00:03:51,780 --> 00:03:59,580
So our JavaScript knowledge is more than enough to loop over an array in order to create lists of components

44
00:03:59,580 --> 00:04:00,900
of the same type.

45
00:04:01,700 --> 00:04:05,990
And finally, we also learned about conditional rendering.

46
00:04:05,990 --> 00:04:12,710
So that's another thing that we do all the time in order to render components only when certain conditions

47
00:04:12,710 --> 00:04:13,940
are met.

48
00:04:14,030 --> 00:04:20,930
And just like rendering lists, we can conditionally render components by using common JavaScript tools

49
00:04:20,930 --> 00:04:28,160
that we already know, for example, the and operator, the ternary operator, and also using multiple

50
00:04:28,160 --> 00:04:30,590
returns and that's it.

51
00:04:30,590 --> 00:04:37,070
So these are the more practical things that we just learned and that we applied to the projects that

52
00:04:37,070 --> 00:04:38,300
we have been building.

53
00:04:38,510 --> 00:04:44,750
We also learned some more theoretical stuff, like the difference between imperative and declarative

54
00:04:44,750 --> 00:04:45,680
approaches.

55
00:04:45,680 --> 00:04:48,440
We learned about separation of concerns.

56
00:04:48,440 --> 00:04:55,670
We learned exactly about why we cannot mutate props, which is another important thing that we learned.

57
00:04:55,670 --> 00:05:02,310
And yeah, we also learned a bunch more theoretical stuff that I'm not going to go into right now.

58
00:05:02,310 --> 00:05:06,780
So you can always rewatch those lectures if you're interested in here.

59
00:05:06,780 --> 00:05:14,190
I just wanted to summarize the practical aspects of everything that we just did in this section, So

60
00:05:14,190 --> 00:05:15,690
I hope that this was helpful.

61
00:05:15,690 --> 00:05:22,200
And now to round off this section, there is one final coding challenge waiting for you where we will

62
00:05:22,200 --> 00:05:27,180
just finish the developer profile card that we started initially.

63
00:05:27,180 --> 00:05:29,940
So hopefully I see you there very soon.
