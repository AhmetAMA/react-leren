1
00:00:00,900 --> 00:00:08,460
We are now ready to finally learn about how exactly React renders our applications behind the scenes.

2
00:00:08,550 --> 00:00:14,400
Now, there is so much to learn here that I split up this lecture into three parts.

3
00:00:14,400 --> 00:00:17,340
So it's this video and the next two ones.

4
00:00:17,430 --> 00:00:23,490
This one serves more as an overview, and then in the next two videos, we're going to go really deep

5
00:00:23,490 --> 00:00:25,410
into some React internals.

6
00:00:26,590 --> 00:00:31,810
And let's start with just a small recap so that we're all on the same page.

7
00:00:32,020 --> 00:00:38,690
So as we build our applications, what we're really doing is building a bunch of components.

8
00:00:38,710 --> 00:00:46,030
We then use these components inside other components as many times as we want, which will cause react

9
00:00:46,030 --> 00:00:51,070
to create one or more component instances of each component.

10
00:00:51,220 --> 00:00:58,690
So these are basically the actual physical components that live in our application and hold state and

11
00:00:58,690 --> 00:00:59,410
props.

12
00:01:00,030 --> 00:01:09,030
Now, as React calls each component instance, each JS will produce a bunch of react.createelement function

13
00:01:09,030 --> 00:01:15,510
calls, which in turn will produce a react element for each component instance.

14
00:01:15,510 --> 00:01:23,730
And so this react element will ultimately be transformed to Dom elements and displayed as a user interface

15
00:01:23,730 --> 00:01:24,960
on the screen.

16
00:01:25,620 --> 00:01:31,410
So we have a pretty good understanding of the initial part of this process.

17
00:01:31,410 --> 00:01:35,430
So all transforming components to react elements.

18
00:01:35,670 --> 00:01:41,280
However, what we don't understand yet is the second part of the process.

19
00:01:41,280 --> 00:01:47,940
So how these react elements actually end up in the Dom and displayed on the screen.

20
00:01:48,490 --> 00:01:55,180
Well, luckily for us, that is exactly what this series of lectures is all about.

21
00:01:56,480 --> 00:02:02,990
So in this lecture we're going to have a quick overview of each of the phases involved in displaying

22
00:02:02,990 --> 00:02:05,400
our components onto the screen.

23
00:02:05,420 --> 00:02:11,750
Then we're going to zoom into each of these phases to learn how the entire process works internally

24
00:02:11,750 --> 00:02:13,040
behind the scenes.

25
00:02:13,800 --> 00:02:21,720
So this process that we're about to study is started by react each time that a new render is triggered.

26
00:02:21,750 --> 00:02:26,340
Most of the time by updating state somewhere in the application.

27
00:02:26,640 --> 00:02:29,670
So state changes trigger renders.

28
00:02:29,670 --> 00:02:33,930
And so it makes sense that the next phase is the render phase.

29
00:02:34,260 --> 00:02:41,300
In this phase, React calls our component functions and figures out how it should update the Dom.

30
00:02:41,310 --> 00:02:49,170
So in order to reflect the latest state changes, however, it does actually not update the Dom in this

31
00:02:49,170 --> 00:02:49,850
phase.

32
00:02:49,860 --> 00:02:57,330
And so React definition of render is very different from what we usually think of as a render, which

33
00:02:57,330 --> 00:02:58,890
can be quite confusing.

34
00:02:59,100 --> 00:03:07,650
So again, in React rendering is not about updating the Dom or displaying elements on the screen.

35
00:03:07,860 --> 00:03:15,880
Rendering only happens internally inside of React and so it does not produce any visual changes.

36
00:03:16,060 --> 00:03:22,960
Now in all the previous sections, I have always used the term rendering with the meaning of displaying

37
00:03:22,960 --> 00:03:30,280
elements on the screen because that was just easy to understand and it just made sense, right?

38
00:03:30,370 --> 00:03:39,070
However, as we just learned, the rendering that used to mean is really this render plus the next phase.

39
00:03:39,070 --> 00:03:46,660
And speaking of that next phase, once React knows how to update the Dom, it does so in the commit

40
00:03:46,660 --> 00:03:47,470
phase.

41
00:03:47,710 --> 00:03:55,540
So in this phase, new elements might be placed in the Dom and already existing elements might get updated

42
00:03:55,540 --> 00:04:01,030
or deleted in order to correctly reflect the current state of the application.

43
00:04:01,240 --> 00:04:08,680
So it's really this commit phase that is responsible for what we traditionally call rendering, not

44
00:04:08,680 --> 00:04:09,880
the render phase.

45
00:04:10,120 --> 00:04:10,780
Okay.

46
00:04:11,110 --> 00:04:18,520
Then finally the browser will notice that the Dom has been updated and so it repaints the screen.

47
00:04:18,790 --> 00:04:25,690
Now this has nothing to do with React anymore, but it's still worth mentioning that it's this final

48
00:04:25,690 --> 00:04:31,450
step that actually produces the visual change that users see on their screens.

49
00:04:32,230 --> 00:04:32,980
All right.

50
00:04:32,980 --> 00:04:40,360
So let's now zoom into each of these different steps, starting with the triggering of a render.

51
00:04:40,920 --> 00:04:45,780
So there are only two ways in which a renderer can be triggered.

52
00:04:45,810 --> 00:04:53,250
The first one is the very first time the application runs, which is what we call the initial render.

53
00:04:53,400 --> 00:05:01,710
And the second one is a state update happening in one or more component instances somewhere in the application,

54
00:05:01,710 --> 00:05:04,800
which is what we call a rerender.

55
00:05:04,950 --> 00:05:11,760
And it's important to note that the render process really is triggered for the entire application,

56
00:05:11,760 --> 00:05:14,610
not just for one single component.

57
00:05:14,850 --> 00:05:22,680
Now, that doesn't mean that the entire Dom is updated because remember, in React rendering is only

58
00:05:22,680 --> 00:05:28,980
about calling the component functions and figuring out what needs to change in the Dom later.

59
00:05:29,660 --> 00:05:36,710
Now, again, this might seem confusing now because earlier in the course I made it seem as though react

60
00:05:36,710 --> 00:05:41,480
only rerenders the component where the state update happened.

61
00:05:41,600 --> 00:05:45,950
But that's because we were learning how react works in practice.

62
00:05:45,950 --> 00:05:53,810
And in fact, when we look at what happens in practice, it looks as if only the updated component is

63
00:05:53,810 --> 00:05:54,860
rerendered.

64
00:05:54,950 --> 00:05:59,360
But now we are learning how React actually works behind the scenes.

65
00:05:59,360 --> 00:06:05,870
And so now we know that React looks at the entire tree whenever a render happens.

66
00:06:06,080 --> 00:06:13,430
Finally, I just want to mention that a render is actually not triggered immediately after a state update

67
00:06:13,430 --> 00:06:14,210
happens.

68
00:06:14,360 --> 00:06:21,770
Instead, it's scheduled for when the JavaScript engine basically has some free time on its hands.

69
00:06:21,950 --> 00:06:27,020
But this difference is usually just a few milliseconds that we won't notice.

70
00:06:27,200 --> 00:06:34,110
There are also some situations like multiple setstate calls in the same function where renders will

71
00:06:34,110 --> 00:06:37,290
be batched as we will explore a bit later.

72
00:06:37,710 --> 00:06:42,990
So this is how renders are triggered, which is the easy part.

73
00:06:43,020 --> 00:06:48,210
What follows is the hard part, which is the actual rendering.

74
00:06:48,210 --> 00:06:51,870
And so let's learn all about that in the next video.
