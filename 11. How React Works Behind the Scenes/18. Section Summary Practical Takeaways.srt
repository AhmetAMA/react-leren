1
00:00:01,110 --> 00:00:08,460
Welcome to the last lecture of the section, and it was a long and complicated section.

2
00:00:08,460 --> 00:00:16,620
I know, but hopefully you enjoyed learning about all these internal workings of React as much as I

3
00:00:16,620 --> 00:00:17,220
did.

4
00:00:17,220 --> 00:00:24,510
And now to finish, I thought it was a great idea to summarize the key learnings that you should retain

5
00:00:24,510 --> 00:00:26,190
from this section.

6
00:00:27,710 --> 00:00:35,720
Now, this is not a summary of everything that we learned, but only the practical takeaways and conclusions

7
00:00:35,720 --> 00:00:38,650
that you will actually need to know in practice.

8
00:00:38,660 --> 00:00:46,820
So as you build your own React apps, and this is necessary because I've mentioned multiple times that

9
00:00:46,820 --> 00:00:53,240
you actually don't need to know all this complicated stuff about how React works behind the scenes,

10
00:00:53,240 --> 00:00:57,470
but you do need to know the practical implications of it.

11
00:00:57,470 --> 00:01:05,120
And so in this lecture is where I gathered all those practical implications in the form of text slides

12
00:01:05,120 --> 00:01:08,270
that you can save and read in the future.

13
00:01:08,920 --> 00:01:16,990
But anyway, let's now move on to our first point, which is that a component is basically like a blueprint

14
00:01:16,990 --> 00:01:21,700
for a piece of UI that will eventually exist on the screen.

15
00:01:21,850 --> 00:01:29,920
When we then use a component, react creates a component instance, which is like an actual physical

16
00:01:29,920 --> 00:01:36,940
manifestation of a component which contains props, state effects and more.

17
00:01:36,970 --> 00:01:44,890
So following the analogy of the blueprint, the component is like a blueprint for a house and a component.

18
00:01:44,890 --> 00:01:51,340
Instances are like the actual houses that have been built from that blueprint.

19
00:01:51,930 --> 00:01:57,780
Finally, a component instance, when rendered, will return a react element.

20
00:01:58,350 --> 00:02:02,040
Okay, so let's now move on to rendering.

21
00:02:02,610 --> 00:02:10,500
So in React rendering only means calling component functions and calculating what Dom elements need

22
00:02:10,500 --> 00:02:14,470
to be inserted, deleted or updated later.

23
00:02:14,490 --> 00:02:18,790
So rendering has nothing to do with actually writing.

24
00:02:18,810 --> 00:02:26,670
So with actually updating the Dom, writing to the Dom is actually called committing in the React language.

25
00:02:26,790 --> 00:02:33,930
So what I want you to remember here is that each time a component instance is rendered and re rendered,

26
00:02:33,930 --> 00:02:36,630
the function is simply called again.

27
00:02:36,810 --> 00:02:40,440
But what actually triggers a render to happen?

28
00:02:40,740 --> 00:02:48,480
Well, as you should probably know already, only the initial app render and state updates can cause

29
00:02:48,510 --> 00:02:52,680
a render, which will happen for the entire application.

30
00:02:52,890 --> 00:03:00,900
So even though it might look as if only one single component is rendered, the process is actually executed

31
00:03:00,900 --> 00:03:02,710
for all components.

32
00:03:03,040 --> 00:03:10,630
Now, when a component instance does get re rendered, all its children will get re rendered as well.

33
00:03:10,870 --> 00:03:18,640
Now, this doesn't mean that all children will get updated in the Dom because thanks to reconciliation,

34
00:03:18,640 --> 00:03:24,550
React will check which elements have actually changed between the two renders.

35
00:03:24,790 --> 00:03:31,600
Now one of the main parts of this reconciliation that I just mentioned is diffing.

36
00:03:32,180 --> 00:03:39,050
So diffing is how react decides which Dom elements need to be added or modified later.

37
00:03:39,170 --> 00:03:46,040
Now, if between two renders a certain react element stays at the same position in the element tree,

38
00:03:46,070 --> 00:03:52,010
the corresponding Dom element and the component state will simply stay the same.

39
00:03:52,100 --> 00:03:58,670
So the Dom will not be modified in this case, which is a huge win for performance.

40
00:03:58,820 --> 00:04:05,630
However, if the element did change to a different position in the tree or if it changed to a different

41
00:04:05,630 --> 00:04:12,270
element type altogether, then the Dom element and the corresponding state will be destroyed.

42
00:04:12,290 --> 00:04:15,230
So they will basically be reset.

43
00:04:15,910 --> 00:04:23,110
Now, one cool thing about the Diffing algorithm is the fact that we can actually influence it by giving

44
00:04:23,110 --> 00:04:30,790
elements a key prop which then allows react to distinguish between multiple component instances of the

45
00:04:30,790 --> 00:04:32,530
same component type.

46
00:04:32,620 --> 00:04:40,000
So when the key on a certain element stays the same across renders, the element is kept in the Dom,

47
00:04:40,000 --> 00:04:43,780
even if it appears at a different position in the tree.

48
00:04:43,840 --> 00:04:52,210
And so this is the reason why we need to use keys in lists because it will prevent unnecessary recreations

49
00:04:52,210 --> 00:04:54,370
of elements in the Dom.

50
00:04:54,580 --> 00:05:01,690
Now on the other hand, when we change the key between renders, the Dom element will be destroyed and

51
00:05:01,690 --> 00:05:02,740
rebuilt.

52
00:05:02,980 --> 00:05:11,110
And so this is a very nice trick that we can use in order to reset state, which is sometimes necessary,

53
00:05:11,110 --> 00:05:15,730
as we saw in two practical examples in this section.

54
00:05:16,670 --> 00:05:17,360
Next.

55
00:05:17,360 --> 00:05:24,680
We have one very important rule that you must never, ever forget, which is that you should never declare

56
00:05:24,680 --> 00:05:28,310
a new component inside another component.

57
00:05:28,640 --> 00:05:36,870
That's because doing so will recreate that nested component every time the parent component rerenders.

58
00:05:36,890 --> 00:05:42,170
So that nested component would always be a new variable, basically.

59
00:05:42,170 --> 00:05:50,060
And so this means that React would always see the nested component as a brand new component and therefore

60
00:05:50,060 --> 00:05:54,740
reset its state each time that the parent state is updated.

61
00:05:55,370 --> 00:06:02,360
Now, the reason why this happens is not the important part, but what matters is that you should always,

62
00:06:02,360 --> 00:06:03,930
always declare.

63
00:06:03,950 --> 00:06:11,240
So you should write new components at the top level of a file, never inside another component.

64
00:06:11,390 --> 00:06:16,140
Now the logic that is responsible for creating Dom elements.

65
00:06:16,160 --> 00:06:22,380
So basically logic that produces JS is called render logic.

66
00:06:22,400 --> 00:06:27,940
And this render logic is not allowed to produce any side effects.

67
00:06:27,950 --> 00:06:37,730
So render logic can have no API calls, no timers, no object or variable mutations, and no state updates.

68
00:06:37,820 --> 00:06:45,290
The only place where side effects are allowed is inside event handlers and inside useeffect.

69
00:06:45,740 --> 00:06:53,930
Okay, now, after all this rendering, it's time to finally update the Dom which happens in the commit

70
00:06:53,930 --> 00:06:54,650
phase.

71
00:06:55,260 --> 00:07:02,490
However, it's actually not react that does this committing, but a so called renderer called react

72
00:07:02,490 --> 00:07:03,090
dom.

73
00:07:03,300 --> 00:07:09,810
That's why we always need to include both these libraries in a React web application project.

74
00:07:09,840 --> 00:07:16,890
We can also use other renderers to use React on different platforms, for example, to build mobile

75
00:07:16,890 --> 00:07:19,980
or native applications with React Native.

76
00:07:20,250 --> 00:07:21,120
All right.

77
00:07:21,120 --> 00:07:28,500
And now for the rest of this last slide, let's leave the topics related to rendering behind and quickly

78
00:07:28,500 --> 00:07:31,110
talk about state and events.

79
00:07:31,290 --> 00:07:38,760
So when we have multiple state updates inside an event handler function, all these state updates will

80
00:07:38,760 --> 00:07:39,670
be batched.

81
00:07:39,690 --> 00:07:43,280
So basically they will happen all at once.

82
00:07:43,290 --> 00:07:51,240
And this is super important because it means that multiple related state updates will only create one

83
00:07:51,240 --> 00:07:56,020
rerender, which once again is great for performance.

84
00:07:56,020 --> 00:08:04,720
And since React 18 automatic batching even happens inside timeouts, promises and native event handlers.

85
00:08:04,900 --> 00:08:13,180
Now one super important practical implication of this is that we cannot access a state variable immediately

86
00:08:13,180 --> 00:08:19,060
after we update it, which is why we say that state updates are asynchronous.

87
00:08:19,560 --> 00:08:26,910
Next up, when we use events inside event handler functions, we get access to a so-called synthetic

88
00:08:26,910 --> 00:08:31,140
event object, not the browser's native object.

89
00:08:31,380 --> 00:08:40,050
So the React team created synthetic events so that events work the exact same way across all browsers.

90
00:08:40,050 --> 00:08:47,420
And the main difference between synthetic and native events is that most synthetic events do actually

91
00:08:47,430 --> 00:08:56,190
bubble, and that includes defocus, blur and change events which do usually not bubble as native browser

92
00:08:56,190 --> 00:08:57,000
events.

93
00:08:57,120 --> 00:09:00,480
The only exception here is the scroll event.

94
00:09:01,020 --> 00:09:01,680
Okay.

95
00:09:01,680 --> 00:09:08,850
And now finally, let's remember that React is a library and not a framework.

96
00:09:09,090 --> 00:09:16,080
This means that you can basically assemble your applications using your favorite or the community's

97
00:09:16,080 --> 00:09:23,200
favorite third party libraries and this is great for flexibility and creative freedom.

98
00:09:23,290 --> 00:09:30,700
The downside of this freedom is that there is an basically infinite amount of libraries that you can

99
00:09:30,700 --> 00:09:31,510
choose from.

100
00:09:31,510 --> 00:09:38,230
And so you need to first find and then learn all this additional libraries that you need.

101
00:09:38,560 --> 00:09:45,130
However, that's not that big of a problem because you will learn about the most commonly used libraries

102
00:09:45,130 --> 00:09:48,220
in the main projects of this course.

103
00:09:48,670 --> 00:09:49,540
All right.

104
00:09:49,540 --> 00:09:51,290
And there you have it.

105
00:09:51,310 --> 00:09:57,520
So this is essentially what I need you to remember from this section going forward.

106
00:09:57,640 --> 00:10:03,010
And again, I hope that you found this section as interesting as I did.

107
00:10:03,010 --> 00:10:09,580
But no matter if you did or not, please leave your comments about it in the Q&amp;A section.

108
00:10:09,700 --> 00:10:17,860
And now maybe take some time to basically recover from all this new material and all these new concepts

109
00:10:17,860 --> 00:10:18,970
that you learned.

110
00:10:18,970 --> 00:10:23,500
And then once you're done, I see you in the next section.
