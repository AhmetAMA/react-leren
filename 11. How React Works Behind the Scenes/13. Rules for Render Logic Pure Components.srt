1
00:00:00,940 --> 00:00:07,540
In order for the rendering process to work in the way that we just learned before, our render logic

2
00:00:07,540 --> 00:00:09,810
needs to follow some simple rules.

3
00:00:09,820 --> 00:00:13,300
So let's look at these rules in this lecture.

4
00:00:14,420 --> 00:00:18,530
But first of all, what actually is render logic?

5
00:00:18,710 --> 00:00:25,070
Well, in order to understand that, let's actually take a look at the two types of logic that we can

6
00:00:25,070 --> 00:00:27,300
write in React components.

7
00:00:27,320 --> 00:00:31,520
So that's render logic and event handler functions.

8
00:00:31,850 --> 00:00:38,900
So render logic is basically all the code that lives at the top level of your component functions,

9
00:00:38,900 --> 00:00:46,070
and that participates in describing how the view of a certain component instance should look like.

10
00:00:46,100 --> 00:00:50,640
So in this code example, there is a lot of render logic.

11
00:00:50,660 --> 00:00:57,860
So we have these two lines of code at the top level and then also the return block where our component

12
00:00:57,860 --> 00:01:00,230
returns its X.

13
00:01:00,500 --> 00:01:05,690
So these describe exactly how the component will be displayed on the screen.

14
00:01:06,080 --> 00:01:12,610
However, if we look closely, we can identify yet another piece of render logic here.

15
00:01:12,620 --> 00:01:16,920
Even though this code is actually inside a function.

16
00:01:17,430 --> 00:01:24,660
So as you can see in the return block, the code there is actually calling this create list function.

17
00:01:24,660 --> 00:01:29,970
And therefore, that logic also participates in describing the component view.

18
00:01:29,970 --> 00:01:32,940
And so it's also render logic.

19
00:01:33,470 --> 00:01:41,190
So basically render logic is all the code that is executed as soon as the component is rendered.

20
00:01:41,210 --> 00:01:44,450
So each time that the function is called.

21
00:01:45,370 --> 00:01:50,980
Now moving on to event handler functions, those are very easy to identify.

22
00:01:51,100 --> 00:01:58,450
So they are basically pieces of code that are executed as a consequence of the event that the handler

23
00:01:58,450 --> 00:02:00,130
is listening to.

24
00:02:00,250 --> 00:02:08,170
So in our example, we have this line of code that essentially registered handle new answer for the

25
00:02:08,170 --> 00:02:13,990
change event and therefore handle new answer is our event handler function.

26
00:02:14,200 --> 00:02:17,550
And this is of course nothing new at this point.

27
00:02:17,560 --> 00:02:21,330
So we have done this many times in the course, right?

28
00:02:21,340 --> 00:02:28,030
But it's still important to differentiate between these two types of logic because they do actually

29
00:02:28,030 --> 00:02:30,830
do fundamentally different things.

30
00:02:30,850 --> 00:02:38,950
So while render logic is code that renders the component event handlers contain code that actually does

31
00:02:38,950 --> 00:02:39,740
things.

32
00:02:39,760 --> 00:02:44,620
So basically code that makes things happen in the application.

33
00:02:44,990 --> 00:02:53,300
So event handlers contain things like state updates, Http requests, reading input fields, page navigation

34
00:02:53,300 --> 00:02:54,770
and many more.

35
00:02:54,950 --> 00:03:00,710
So all things that basically change and manipulate the application in some way.

36
00:03:01,040 --> 00:03:04,280
Now, why is this all so important?

37
00:03:04,460 --> 00:03:12,100
Well, it's important because react requires that components are pure when it comes to render logic

38
00:03:12,110 --> 00:03:15,770
in order for everything to work as expected.

39
00:03:16,570 --> 00:03:19,300
But what does pure actually mean?

40
00:03:19,510 --> 00:03:26,080
To answer that, let's have a quick refresher on functional programming principles, which are quite

41
00:03:26,080 --> 00:03:28,720
important in React in general.

42
00:03:28,720 --> 00:03:31,450
And let's start with side effects.

43
00:03:32,080 --> 00:03:39,790
So a side effect happens whenever a function depends on any data that is outside the function scope

44
00:03:39,790 --> 00:03:46,680
or even more importantly, whenever a function modifies data that is outside its scope.

45
00:03:46,690 --> 00:03:52,630
And I like to think as a side effect, as a function's interaction with the outside world.

46
00:03:52,810 --> 00:04:00,250
For example, this function is mutating an outside object, and so this is clearly a side effect.

47
00:04:00,790 --> 00:04:08,380
Other examples of side effects are Http requests writing to the Dom, setting timers and more.

48
00:04:08,930 --> 00:04:15,620
The other important functional concept is pure functions, which are basically functions without side

49
00:04:15,620 --> 00:04:16,400
effects.

50
00:04:16,900 --> 00:04:23,440
So basically, these are functions that do not change any variable outside their scope.

51
00:04:23,560 --> 00:04:30,280
Also, when we give a pure function the same input, it will always return the same output.

52
00:04:30,490 --> 00:04:37,960
For example, this function is clearly a pure function because if we give it the same argument r, it

53
00:04:37,960 --> 00:04:43,330
will always give us the area of the circle based on that R value.

54
00:04:43,450 --> 00:04:49,450
So the output only depends on the inputs which makes this function predictable.

55
00:04:49,810 --> 00:04:56,650
This other function right here on the other hand, is completely unpredictable because it returns a

56
00:04:56,650 --> 00:05:02,020
string that contains a date and that date changes every second.

57
00:05:02,050 --> 00:05:08,710
So in this case, even if we give the function the same input, the output will always be different

58
00:05:08,710 --> 00:05:11,380
because the date will always be different.

59
00:05:11,380 --> 00:05:14,950
And therefore, this is an impure function.

60
00:05:15,040 --> 00:05:18,500
And the same is true for the second function.

61
00:05:19,080 --> 00:05:26,250
So notice how this function mutates an outside variable, which of course makes this function impure

62
00:05:26,250 --> 00:05:26,970
as well.

63
00:05:27,630 --> 00:05:33,530
Now calling functions impure makes it sound as if side effects are somehow bad.

64
00:05:33,540 --> 00:05:36,090
But that's actually not true.

65
00:05:36,390 --> 00:05:40,520
So side effects are not bad in themselves.

66
00:05:40,530 --> 00:05:47,850
In fact, if we think about it, any program can only be useful if it has some interaction with the

67
00:05:47,850 --> 00:05:50,010
outside world at some point.

68
00:05:50,040 --> 00:05:51,000
Right.

69
00:05:51,090 --> 00:05:59,640
Like a web application that never fetches any data or never writes to the Dom is just completely useless.

70
00:05:59,940 --> 00:06:07,440
However, in order to make useful and bug free applications, we need to know when and how to create

71
00:06:07,440 --> 00:06:08,420
side effects.

72
00:06:08,430 --> 00:06:14,070
Which brings us back to React and its rules for render logic.

73
00:06:14,370 --> 00:06:21,750
And essentially there's just one big rule, which is that components must be pure functions when it

74
00:06:21,750 --> 00:06:23,580
comes to render logic.

75
00:06:23,940 --> 00:06:31,630
This means that if we give a certain component instance the same props, so the same input, then the

76
00:06:31,630 --> 00:06:37,720
component should always return the exact same output in the form of JSX x.

77
00:06:37,900 --> 00:06:44,470
In practice, this means that render logic is not allowed to produce any side effects.

78
00:06:44,590 --> 00:06:51,820
So in other words, the logic that runs at the top level and is responsible for rendering the component

79
00:06:51,850 --> 00:06:55,420
should have no interaction with the outside world.

80
00:06:55,630 --> 00:07:03,160
This means that render logic is not allowed to perform network requests to create timers or to directly

81
00:07:03,160 --> 00:07:04,870
work with the Dom API.

82
00:07:04,900 --> 00:07:09,070
For example listening to events using Add event listener.

83
00:07:09,540 --> 00:07:16,740
Now, according to what we learned previously, render logic must also not mutate objects or variables

84
00:07:16,740 --> 00:07:20,370
that are outside the scope of the component function.

85
00:07:20,370 --> 00:07:27,810
And this is actually the reason why we cannot mutate props, which remember is one of the hard rules

86
00:07:27,810 --> 00:07:29,120
of react.

87
00:07:29,130 --> 00:07:32,100
And so now you know why that rule exists.

88
00:07:32,130 --> 00:07:37,980
It's because doing so would be a side effect and side effects are not allowed.

89
00:07:38,770 --> 00:07:47,950
Finally, we really cannot update state or refs in render logic and updating state in render logic would

90
00:07:47,950 --> 00:07:52,480
actually create an infinite loop, which is why we can never do that.

91
00:07:52,600 --> 00:07:59,560
State updates are technically not side effects, but it's still important for them to be on this list.

92
00:08:00,240 --> 00:08:06,390
Now, there are other side effects that are technically not allowed as well, but that we create all

93
00:08:06,390 --> 00:08:11,390
the time, like using console.log or creating random numbers.

94
00:08:11,430 --> 00:08:18,360
So these are clearly interactions with the outside world, but they don't seem to do any harm and so

95
00:08:18,360 --> 00:08:20,490
we can safely keep doing them.

96
00:08:21,000 --> 00:08:21,720
All right.

97
00:08:21,720 --> 00:08:29,310
But now you might be wondering if all this stuff is not allowed, then how will I ever be able to make

98
00:08:29,310 --> 00:08:31,920
an API call to fetch some data?

99
00:08:32,220 --> 00:08:38,580
Well, keep in mind that these side effects are only forbidden inside render logic.

100
00:08:38,820 --> 00:08:43,530
This means that you have other options for running your side effects.

101
00:08:43,680 --> 00:08:51,420
First of all, we saw earlier that event handler functions are not render logic and therefore side effects

102
00:08:51,420 --> 00:08:57,300
are allowed and actually encouraged to be used inside these functions.

103
00:08:57,330 --> 00:09:04,360
And second, if we need to create a side effect, as soon as the component function is first executed,

104
00:09:04,390 --> 00:09:09,960
we can register that side effect using a special hook called use effect.

105
00:09:09,970 --> 00:09:13,510
But we will learn all about that in the next section.

106
00:09:13,780 --> 00:09:20,350
For now, let's move on to another super important topic, which is state update batching.
