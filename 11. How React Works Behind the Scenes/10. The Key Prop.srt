1
00:00:00,970 --> 00:00:06,940
Remember how I mentioned the key prop when we talked about how the Diffing algorithm works?

2
00:00:06,940 --> 00:00:13,900
And so let's now take some time to look at the key prop in detail in order to learn what it does and

3
00:00:13,900 --> 00:00:15,490
when we need to use it.

4
00:00:16,950 --> 00:00:24,150
So the key prop is a special prop that we can use to tell the diffing algorithm that a certain element

5
00:00:24,150 --> 00:00:25,510
is unique.

6
00:00:25,530 --> 00:00:30,150
And this works for both Dom elements and react elements.

7
00:00:30,770 --> 00:00:38,090
So in practice, this means that we can give each component instance a unique identification which will

8
00:00:38,090 --> 00:00:43,940
allow react to distinguish between multiple instances of the same component type.

9
00:00:44,470 --> 00:00:49,000
Now, that's all great, but why do we actually need this?

10
00:00:49,300 --> 00:00:56,470
Well, remember that the second assumption of the Diffing algorithm is that whenever an element has

11
00:00:56,470 --> 00:01:04,900
a stable key, so a key that stays the same across renders the element will be kept in the Dom, even

12
00:01:04,900 --> 00:01:07,750
if the position in the tree has changed.

13
00:01:07,930 --> 00:01:15,730
And this is the whole reason why we should use the key prop in lists as we have already done so many

14
00:01:15,730 --> 00:01:17,590
times throughout the course.

15
00:01:17,620 --> 00:01:22,720
And so in the next slide you will finally learn why we need to do that.

16
00:01:23,170 --> 00:01:29,380
On the other hand, when the key of a certain element changes between renders, the element will be

17
00:01:29,380 --> 00:01:33,280
destroyed and a new one will be created in its place.

18
00:01:33,280 --> 00:01:38,770
Even if the element's position in the tree is exactly the same as before.

19
00:01:38,950 --> 00:01:46,070
And so this is great to reset state, which is the second big use case of the key prop.

20
00:01:46,340 --> 00:01:54,050
But let's go back to the first big use case of the key prop, which is to use keys in lists.

21
00:01:54,170 --> 00:01:58,730
And let's start by considering this example without keys.

22
00:01:58,940 --> 00:02:05,280
So here we have a list with two question items which clearly have no key prop.

23
00:02:05,300 --> 00:02:11,030
But let's see what happens when we add a new item to the top of the list.

24
00:02:11,270 --> 00:02:18,260
Well, the two list items that we already had are clearly still the same, but they will now appear

25
00:02:18,260 --> 00:02:21,530
at different positions in the React Element tree.

26
00:02:21,830 --> 00:02:28,460
They are no longer the first and second children, but now they are the second and the third children.

27
00:02:29,040 --> 00:02:34,550
So we basically have the same elements but at different positions in the tree.

28
00:02:34,560 --> 00:02:41,130
And so according to the different rules that we learned earlier, these two Dom elements will be removed

29
00:02:41,130 --> 00:02:46,200
from the Dom and then immediately recreate it at their new positions.

30
00:02:46,200 --> 00:02:53,730
And this is obviously bad for performance because removing and rebuilding these same Dom elements is

31
00:02:53,730 --> 00:02:56,310
just wasted work, right?

32
00:02:56,430 --> 00:03:01,350
But the thing is that React doesn't know that this is wasted work.

33
00:03:01,470 --> 00:03:08,370
Of course, we developers intuitively know that these two elements are actually the same as before,

34
00:03:08,370 --> 00:03:11,730
but React has no way of knowing that.

35
00:03:11,910 --> 00:03:15,060
But what if we could actually change that?

36
00:03:15,390 --> 00:03:23,520
Well, that's where keys come into play, because remember, a key allows us developers to uniquely

37
00:03:23,520 --> 00:03:30,850
identify an element so we can give react that information that it doesn't have on its own.

38
00:03:31,000 --> 00:03:38,950
And so now when we add a new item to the top of the list, the two original elements are of course still

39
00:03:38,950 --> 00:03:43,330
in different positions of the tree, but they do have a stable key.

40
00:03:43,360 --> 00:03:46,960
So a key that stays the same across renders.

41
00:03:47,080 --> 00:03:50,980
So that's Q one and Q two in this case.

42
00:03:50,980 --> 00:03:57,790
And so according to the Diffing rules, these two elements will now be kept in the Dom, even though

43
00:03:57,790 --> 00:04:00,690
their position in the tree is different.

44
00:04:00,700 --> 00:04:07,390
So they will not be destroyed and the result will be a bit more of a performant UI.

45
00:04:07,720 --> 00:04:14,200
Now of course you won't really notice this difference on small lists, but it will make a huge difference

46
00:04:14,200 --> 00:04:21,340
when you have a really big list with thousands of elements which can actually happen in some applications.

47
00:04:21,730 --> 00:04:28,660
So in summary, always use the key prop when you have multiple child elements of the same type.

48
00:04:28,660 --> 00:04:36,010
So just like the question elements in this example and you already knew that you should do that because

49
00:04:36,010 --> 00:04:40,000
well, otherwise react will complain and give us a warning.

50
00:04:40,000 --> 00:04:44,920
But now you hopefully understand exactly why you need to do it.

51
00:04:46,840 --> 00:04:47,530
All right.

52
00:04:47,530 --> 00:04:50,860
So we looked at the use case for a stable key.

53
00:04:50,860 --> 00:04:57,940
And so now let's look at the use case for a changing key, which is used to reset state in component

54
00:04:57,940 --> 00:04:58,930
instances.

55
00:04:59,140 --> 00:05:05,290
Now, here we don't need a big code example because we will do this in practice in the next lecture.

56
00:05:05,290 --> 00:05:09,250
But let me just show you what I mean by resetting State.

57
00:05:10,000 --> 00:05:17,380
So let's say we have this question inside question box and we pass in this object as a prop.

58
00:05:18,000 --> 00:05:25,680
Now the question component instance has an answer state, which right now is set to react, allows us

59
00:05:25,680 --> 00:05:27,240
to build apps faster.

60
00:05:27,390 --> 00:05:32,190
But now let's imagine that the question changes to this one.

61
00:05:32,820 --> 00:05:37,410
So we still have the same element at the same position in the tree.

62
00:05:37,440 --> 00:05:40,170
All that changed was the question prop.

63
00:05:40,720 --> 00:05:44,650
So what do you think will happen to the state in this case?

64
00:05:45,150 --> 00:05:52,380
Well, let's remember one of the Diffing rules which says that if we have the same element at the same

65
00:05:52,380 --> 00:05:57,480
position in the tree, the Dom element and its state will be kept.

66
00:05:57,840 --> 00:06:04,800
Therefore, what's going to happen is that the state of question will be preserved, so it will still

67
00:06:04,800 --> 00:06:08,550
show the answer that was in the component state before.

68
00:06:08,790 --> 00:06:13,860
But that answer is of course completely irrelevant to this new question.

69
00:06:13,980 --> 00:06:14,910
Right.

70
00:06:14,940 --> 00:06:19,530
So it doesn't make any sense to keep this state around here.

71
00:06:20,240 --> 00:06:25,100
So basically what we need is a way to reset this state.

72
00:06:25,100 --> 00:06:31,100
And as you can guess, this is where the key prop comes into play once again.

73
00:06:31,310 --> 00:06:40,160
So now we have a key of 23 in this first question, which allows react to uniquely identify this component

74
00:06:40,160 --> 00:06:41,030
instance.

75
00:06:41,330 --> 00:06:45,830
Then when a new question appears, we can give it a different key.

76
00:06:45,980 --> 00:06:52,490
And so by doing this, we tell React that this should be a different component instance and therefore

77
00:06:52,520 --> 00:06:55,610
that it should create a brand new Dom element.

78
00:06:55,730 --> 00:07:03,020
And the result of doing this is that the state will be reset, which is exactly what we need in this

79
00:07:03,020 --> 00:07:07,790
situation in order to make this small app work in a logical way.

80
00:07:08,030 --> 00:07:14,330
So whenever you find yourself in a position where you need to reset state, just make sure that you

81
00:07:14,330 --> 00:07:19,190
give the element a key and that the key changes across renders.

82
00:07:19,940 --> 00:07:26,960
Now, this actually isn't necessary very often, but you will sometimes find yourself in this situation.

83
00:07:26,960 --> 00:07:32,570
And so when this happens, it's very important to know that this is the solution.

84
00:07:32,990 --> 00:07:33,620
Okay?

85
00:07:33,620 --> 00:07:38,840
And to make this even more clearer now, let's go back to our small project.
