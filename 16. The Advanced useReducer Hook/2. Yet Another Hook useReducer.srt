1
00:00:00,990 --> 00:00:08,340
Let's start this section by getting a first high level overview of how to use the Usereducer hook in

2
00:00:08,340 --> 00:00:12,030
practice over this lecture and the next one.

3
00:00:13,320 --> 00:00:19,110
And as always, it is time to create yet another project.

4
00:00:20,290 --> 00:00:27,130
So let's move to our folder and then let's run Npx Create.

5
00:00:28,070 --> 00:00:31,240
React app at version five.

6
00:00:31,250 --> 00:00:36,110
And then the app that we're going to build in this section is going to be called.

7
00:00:36,790 --> 00:00:38,560
React quiz.

8
00:00:40,030 --> 00:00:40,810
All right.

9
00:00:40,810 --> 00:00:47,290
And now let's wait until create React app finishes installing all the packages that we need.

10
00:00:49,650 --> 00:00:50,370
Okay.

11
00:00:50,370 --> 00:00:53,520
And now it's time for our usual clean up.

12
00:00:55,430 --> 00:00:58,790
So first I'm going to rename this here.

13
00:00:59,060 --> 00:01:01,880
So we're already in our 10th project.

14
00:01:02,210 --> 00:01:05,250
And now let's get rid of all this stuff here.

15
00:01:05,270 --> 00:01:06,680
As always.

16
00:01:08,910 --> 00:01:12,320
Okay, then getting our starters from here.

17
00:01:12,470 --> 00:01:15,920
And this time we have five starter files.

18
00:01:15,920 --> 00:01:18,380
So I think that might be a record.

19
00:01:19,820 --> 00:01:30,200
Then just replace the file and then let's just drag and drop our folder onto VS code.

20
00:01:32,020 --> 00:01:39,280
And then as always, let's also delete all the stuff we don't need from here.

21
00:01:41,000 --> 00:01:42,800
And the rest is okay.

22
00:01:42,800 --> 00:01:50,480
So we need the up component and we need to include the CSS file, which as always is part of the starter

23
00:01:50,480 --> 00:01:52,010
files right here.

24
00:01:53,310 --> 00:01:57,870
So let's start by opening up the app file and the date count file.

25
00:01:58,400 --> 00:02:00,260
Which we will need soon.

26
00:02:00,500 --> 00:02:05,720
And then here, let's delete everything and start the app component from scratch.

27
00:02:07,040 --> 00:02:10,190
So export default function.

28
00:02:11,630 --> 00:02:12,230
App.

29
00:02:13,940 --> 00:02:22,430
And then here, let's just create a div and in this div I will immediately call the date counter component.

30
00:02:25,060 --> 00:02:28,600
So date counter and then I need to import that.

31
00:02:34,230 --> 00:02:36,540
From date counter.

32
00:02:37,630 --> 00:02:39,160
So let's take a look.

33
00:02:39,310 --> 00:02:45,610
So opening up or integrated terminal and then NPM start.

34
00:02:46,590 --> 00:02:51,840
And so this is what you should see if you successfully started your application.

35
00:02:52,050 --> 00:02:58,230
So let's also close the app, because in these first two lectures, we will only be working with the

36
00:02:58,230 --> 00:02:59,460
date counter.

37
00:02:59,730 --> 00:03:06,430
So this date counter is identical to what we implemented in one of the previous challenges.

38
00:03:06,450 --> 00:03:12,750
So basically here, as we click on one of these values, it will then increase the date.

39
00:03:12,780 --> 00:03:20,760
We can also update that number here and you see that then it also increases the date and we can change

40
00:03:20,760 --> 00:03:23,650
the value on this slider, which is basically the step.

41
00:03:23,670 --> 00:03:29,460
So if we then click here, it increments by whatever the step value is here.

42
00:03:30,150 --> 00:03:30,840
Okay.

43
00:03:30,840 --> 00:03:37,950
And so what we're going to do now is to basically replace these two use state hooks with usereducer

44
00:03:37,950 --> 00:03:38,670
hooks.

45
00:03:38,700 --> 00:03:44,670
So it's very important that you understand exactly what this code here does and how it works.

46
00:03:44,670 --> 00:03:50,680
And so in case you didn't do the challenge or don't really remember, then please take a few minutes

47
00:03:50,710 --> 00:03:53,630
now to really check out this code.

48
00:03:53,650 --> 00:04:00,430
So all the event handlers that we have here and how they update these two states and how the states

49
00:04:00,430 --> 00:04:07,480
interact with one another so only proceed in this lecture once you are really sure how everything works

50
00:04:07,480 --> 00:04:07,990
here.

51
00:04:08,560 --> 00:04:09,250
Okay.

52
00:04:09,400 --> 00:04:14,620
But anyway, let's now finally talk about the Usereducer Hook.

53
00:04:14,950 --> 00:04:23,470
So the Usereducer Hook is basically a more advanced and more complex way of managing state instead of

54
00:04:23,470 --> 00:04:25,000
the use state hook.

55
00:04:25,090 --> 00:04:32,380
Now the Usereducer Hook works with a so called reducer function, which is a pure function that will

56
00:04:32,380 --> 00:04:39,310
always take in the previous state and the so-called action as an argument and will then return the next

57
00:04:39,310 --> 00:04:40,060
state.

58
00:04:40,240 --> 00:04:44,110
But instead of talking about it, let's actually use it.

59
00:04:44,110 --> 00:04:49,330
And I will start by replacing this first count state right here.

60
00:04:49,600 --> 00:04:51,250
So let's write.

61
00:04:51,900 --> 00:04:54,570
Again count and then dispatch.

62
00:04:54,600 --> 00:04:57,900
And I will explain what these mean here in a minute.

63
00:04:58,530 --> 00:05:01,320
And so then use reducer.

64
00:05:01,410 --> 00:05:08,400
And so this hook takes in not only the initial state, but also the reducer function that I was just

65
00:05:08,400 --> 00:05:09,430
talking about.

66
00:05:09,450 --> 00:05:14,550
So let's already write that here and I will then create this function in a minute.

67
00:05:15,720 --> 00:05:17,250
So that's the first argument.

68
00:05:17,250 --> 00:05:20,730
And the second argument is, again, the initial state.

69
00:05:20,730 --> 00:05:22,830
And so that's again, zero.

70
00:05:23,860 --> 00:05:31,840
So let's then comment out this state and then let's create outside of the component that reducer function.

71
00:05:32,020 --> 00:05:35,560
So that's just function reducer.

72
00:05:35,560 --> 00:05:44,920
And so as I was saying, this reducer function takes as the arguments the current state and an action.

73
00:05:45,670 --> 00:05:51,370
And so the first thing that we're going to do is to just log these two to the console.

74
00:05:53,030 --> 00:05:53,800
Okay.

75
00:05:54,600 --> 00:05:59,850
Now, here we got a couple of errors, so let's just comment out all of this code here.

76
00:06:03,810 --> 00:06:07,340
So we actually no longer need any of this.

77
00:06:07,370 --> 00:06:14,840
And then we also need to include the use reducer hook into our application.

78
00:06:16,060 --> 00:06:19,990
Okay, let's maybe reload here and there we go.

79
00:06:20,970 --> 00:06:28,010
Okay, so we have our reducer function, but when does this function actually get called?

80
00:06:28,310 --> 00:06:33,200
Well, that's where this dispatch here actually comes into play.

81
00:06:33,410 --> 00:06:39,360
So we see that the use reducer hook does return the current state.

82
00:06:39,380 --> 00:06:46,590
So just like the use state hook, but then instead of also returning a state updating function, the

83
00:06:46,590 --> 00:06:49,950
reuse reducer hook returns as a second thing.

84
00:06:49,970 --> 00:06:52,040
This dispatch function.

85
00:06:52,040 --> 00:06:57,170
And so this dispatch function can also be used to update the state.

86
00:06:57,200 --> 00:07:00,020
It just works in a slightly different way.

87
00:07:01,240 --> 00:07:05,950
So let's just call this function right here.

88
00:07:07,400 --> 00:07:15,230
And then let's pass in the number one and actually let's do that in the increment event handler.

89
00:07:15,530 --> 00:07:19,940
So the one that is going to be called when we click here on this button.

90
00:07:19,970 --> 00:07:24,410
So let's actually click on this button and.

91
00:07:25,760 --> 00:07:27,800
Here we get our output.

92
00:07:28,190 --> 00:07:30,200
Let's make this a bit bigger.

93
00:07:30,560 --> 00:07:38,990
And so the output that we get so the console dot log from here is zero and one meaning that the state

94
00:07:38,990 --> 00:07:42,110
is zero and the action is one.

95
00:07:42,380 --> 00:07:44,210
So why is that?

96
00:07:44,300 --> 00:07:50,390
Well, it is because the reducer function gets access to the current state, as I was saying in the

97
00:07:50,390 --> 00:07:53,270
beginning, which right now is zero.

98
00:07:53,270 --> 00:08:00,710
So it's this initial state and then it also gets access to the action, which right now is simply this

99
00:08:00,710 --> 00:08:04,150
one that we passed into the dispatch function.

100
00:08:04,190 --> 00:08:08,810
So this is basically going to become the action in the reducer.

101
00:08:09,050 --> 00:08:16,850
And so the idea of the reducer is to take these two things so the current state plus the action and

102
00:08:16,850 --> 00:08:19,820
based on that, return the next state.

103
00:08:20,830 --> 00:08:22,510
And so let's do that.

104
00:08:24,040 --> 00:08:28,300
So all we want to do is to return the state.

105
00:08:29,860 --> 00:08:31,990
Plus the action in this case.

106
00:08:31,990 --> 00:08:36,840
And so whatever we return here will then become the new state.

107
00:08:36,850 --> 00:08:42,160
And so this means that right now, our value here should become one.

108
00:08:42,430 --> 00:08:43,900
Let's just reload.

109
00:08:45,540 --> 00:08:47,130
And there we go.

110
00:08:47,280 --> 00:08:50,760
So our state was indeed successfully updated.

111
00:08:52,150 --> 00:08:57,400
Now, when we click here, of course nothing's going to happen, but let's fix that.

112
00:08:57,730 --> 00:09:05,500
So let's then again call the dispatch function, which in the terms of use reducer we call dispatching

113
00:09:05,500 --> 00:09:06,430
an action.

114
00:09:06,700 --> 00:09:10,270
So here we will dispatch an action of minus one.

115
00:09:12,610 --> 00:09:19,420
And so then that minus one will get added to the current state, which will then decrease the value.

116
00:09:19,600 --> 00:09:21,790
And so that works just fine.

117
00:09:22,550 --> 00:09:23,450
Great.

118
00:09:23,540 --> 00:09:27,860
Now, at this point, this isn't really useful, is it?

119
00:09:27,980 --> 00:09:34,130
I mean, we had to do a lot of additional work to get the same functionality as just this.

120
00:09:34,310 --> 00:09:35,170
Right.

121
00:09:35,180 --> 00:09:39,650
But trust me, it will get a lot more useful as we keep going here.

122
00:09:40,390 --> 00:09:45,310
So next up, let's think about how we can set this date.

123
00:09:45,340 --> 00:09:52,570
Because remember, when we type some number here, we actually want the state to update to that number.

124
00:09:52,840 --> 00:09:56,500
So that's what we have here in the define count.

125
00:09:56,680 --> 00:10:02,570
However, this is not going to work really in the same way that we have been doing.

126
00:10:02,590 --> 00:10:04,870
So here if we just dispatch.

127
00:10:07,380 --> 00:10:15,300
E dot target dot value, then that will simply be added to the current state.

128
00:10:15,980 --> 00:10:16,640
Right.

129
00:10:16,640 --> 00:10:22,160
So let's write something here and I will now write a zero so that we then have ten here.

130
00:10:22,430 --> 00:10:30,650
But then as I wrote the Zero, it actually added that to the state because, well, here we are just

131
00:10:30,650 --> 00:10:33,290
adding the action to the current state.

132
00:10:33,320 --> 00:10:38,930
And so if I now write another zero, that will just get added to the state that is already here as well.

133
00:10:39,660 --> 00:10:42,480
So that's not at all what we want.

134
00:10:42,480 --> 00:10:48,630
And so therefore, now it's time to actually start thinking about actions here.

135
00:10:48,930 --> 00:10:52,320
So basically, in this case, we have three actions.

136
00:10:52,320 --> 00:10:58,530
We have decreasing the count, we have increasing it and we have setting it.

137
00:10:58,530 --> 00:11:01,830
And so we should actually name these actions.

138
00:11:02,100 --> 00:11:09,240
So what we're going to do is to not just pass in this value, but an object which contains the action

139
00:11:09,240 --> 00:11:11,340
as well as this value.

140
00:11:14,110 --> 00:11:14,770
So.

141
00:11:15,450 --> 00:11:21,420
Let's write type and then let's call this deck for decreasing.

142
00:11:21,420 --> 00:11:22,410
And then.

143
00:11:23,330 --> 00:11:25,850
And payload and then set it to one.

144
00:11:26,620 --> 00:11:26,840
No.

145
00:11:26,860 --> 00:11:27,430
Okay.

146
00:11:28,320 --> 00:11:34,470
So this object is what we now call an action when we work with reducer functions.

147
00:11:34,470 --> 00:11:39,210
And in theory, this object here could have any shape that we wanted.

148
00:11:39,210 --> 00:11:46,230
But it is kind of a standard to always just have the type property and the payload property.

149
00:11:46,470 --> 00:11:49,990
So actually not payload, but really payload.

150
00:11:50,010 --> 00:11:55,110
So this is the standard that you will always see when using the use reducer hook.

151
00:11:55,140 --> 00:11:58,970
And the same is actually true later in Redux.

152
00:11:58,980 --> 00:12:01,230
So in case you heard of that.

153
00:12:02,360 --> 00:12:04,580
So let's do the same thing here as well.

154
00:12:04,880 --> 00:12:06,020
So type.

155
00:12:07,420 --> 00:12:11,620
This one will be ink and then the payload here.

156
00:12:12,340 --> 00:12:14,380
We'll just be one.

157
00:12:15,880 --> 00:12:16,710
Okay.

158
00:12:16,710 --> 00:12:23,370
And so now here instead of just doing this, we now need to account for these different types.

159
00:12:24,690 --> 00:12:30,120
So let's say if the action type is inc.

160
00:12:31,200 --> 00:12:34,410
Well, then return the current state.

161
00:12:36,810 --> 00:12:39,870
Plus action dot payload.

162
00:12:41,750 --> 00:12:46,910
Then if it is decrease, then minus.

163
00:12:48,470 --> 00:12:57,860
And if the action dot type is set count, which we will create later.

164
00:12:58,640 --> 00:13:04,550
Well then actually simply return action dot payload.

165
00:13:04,850 --> 00:13:08,900
But let's experiment now with this so that it makes more sense.

166
00:13:09,790 --> 00:13:10,870
So let's reload.

167
00:13:10,870 --> 00:13:13,480
And first of all, let's see if this works now.

168
00:13:13,810 --> 00:13:15,940
And beautiful.

169
00:13:18,000 --> 00:13:19,470
So really nice.

170
00:13:19,740 --> 00:13:23,130
And now here, let's dispatch also.

171
00:13:27,890 --> 00:13:32,900
Actually an action object with the type of set count.

172
00:13:34,600 --> 00:13:39,870
And then here the payload will be whatever value is typed into this field.

173
00:13:39,880 --> 00:13:43,120
And so now this actually works.

174
00:13:43,700 --> 00:13:48,890
So whatever value I type here now is this e dot target dot value.

175
00:13:48,890 --> 00:13:53,630
And this will become the payload in this action right here.

176
00:13:53,630 --> 00:13:57,800
And so then we dispatch this action to our reducer.

177
00:13:57,950 --> 00:14:01,220
And so then that action contains that value.

178
00:14:01,250 --> 00:14:04,340
So this 700 right here and the type.

179
00:14:04,340 --> 00:14:11,720
And so then based on that type, we decide that the next state should become exactly that value.

180
00:14:11,720 --> 00:14:14,180
So that's 700 in this case.

181
00:14:14,450 --> 00:14:21,080
And if all this sounds and looks really confusing, then please don't worry at this point.

182
00:14:21,080 --> 00:14:28,040
So now we are only getting like a overview of how all this works in practice, but I will explain you

183
00:14:28,040 --> 00:14:32,480
exactly what the use reducer hook is, how it really works.

184
00:14:32,480 --> 00:14:39,560
And yeah, we will have some nice diagrams and hopefully by then all of this will make a lot of sense.

185
00:14:40,130 --> 00:14:44,090
Now, just to finish here, let's think a little bit more about this.

186
00:14:44,940 --> 00:14:51,120
So actually, is there a need to pass in the payload right here and right here?

187
00:14:51,450 --> 00:14:58,590
Well, not really, because the reducer should actually know itself what happens when we want to decrease.

188
00:14:59,620 --> 00:15:00,310
Right.

189
00:15:00,310 --> 00:15:05,170
So decreasing and increasing is really just adding or subtracting one.

190
00:15:05,170 --> 00:15:09,480
And so we should add that logic here directly in our reducer.

191
00:15:09,490 --> 00:15:16,950
So our reducer should know by himself or by itself how to perform these types of actions.

192
00:15:16,960 --> 00:15:23,500
And so then we can remove the payload from here and make it a little bit easier to dispatch this action.

193
00:15:23,890 --> 00:15:27,520
So the payload property here is optional.

194
00:15:27,520 --> 00:15:31,840
And of course, here in this case, we still need it.

195
00:15:31,840 --> 00:15:38,860
So we basically still need to pass our reducer this value here because otherwise, of course, it would

196
00:15:38,860 --> 00:15:41,740
have no way of setting the next state.

197
00:15:42,530 --> 00:15:43,220
Okay.

198
00:15:43,220 --> 00:15:44,990
And so this still works.

199
00:15:44,990 --> 00:15:51,770
And with this, we finished the first part of transforming this current state here from a simple use

200
00:15:51,770 --> 00:15:54,350
state to a use reducer.

201
00:15:54,350 --> 00:15:57,410
And so let's quickly recap what happened here.

202
00:15:58,170 --> 00:16:06,270
So this new hook takes in not only the initial state, which was zero, but also a reducer function,

203
00:16:06,270 --> 00:16:14,220
which will always get access to the current state and the action that we pass into the dispatch function.

204
00:16:14,840 --> 00:16:17,750
So where does this dispatch function come from?

205
00:16:17,870 --> 00:16:22,320
Well, it is one of the things that use reducer returns.

206
00:16:22,340 --> 00:16:29,960
So this returns always the current state, which here we decided to call count and then it also returns

207
00:16:29,960 --> 00:16:35,900
the dispatch function which we can then use to dispatch actions like this one.

208
00:16:36,530 --> 00:16:44,120
So the convention is to dispatch actions that contain a type and then optionally also a payload with

209
00:16:44,120 --> 00:16:48,170
the goal to pass in some value into the reducer.

210
00:16:48,260 --> 00:16:55,490
And so then our reducer function takes the current state and it takes all the information that is contained

211
00:16:55,490 --> 00:16:59,420
in the action in order to compute the next state.

212
00:16:59,450 --> 00:17:04,870
So usually based on the action type, the reducer then takes some kind of decision.

213
00:17:04,880 --> 00:17:09,650
For example, if it's inc so increment, then it simply adds one.

214
00:17:09,680 --> 00:17:13,310
If it's decrement, then it subtracts one from the current state.

215
00:17:13,310 --> 00:17:20,660
And if it's set count then it will simply set the new state as the value that came in as the payload.

216
00:17:20,660 --> 00:17:23,300
And so those values are returned.

217
00:17:23,300 --> 00:17:27,710
And so this return value is what will become the next state.

218
00:17:27,800 --> 00:17:34,760
And so then as always, the component is re rendered and the UI is updated as well.

219
00:17:35,390 --> 00:17:36,240
Okay.

220
00:17:36,240 --> 00:17:43,860
So hopefully this made a bit of sense, but if not, well, we will have lots of opportunities to practice

221
00:17:43,860 --> 00:17:47,310
this throughout this section and the rest of the course.

222
00:17:47,610 --> 00:17:52,290
Next up, we will also incorporate this step here into our reducer.

223
00:17:52,290 --> 00:17:56,100
And so let's do that in the next video right away.
