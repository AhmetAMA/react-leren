1
00:00:00,910 --> 00:00:09,550
So after a quick break, let's now finally build the simple feature that allows a user to restart a

2
00:00:09,550 --> 00:00:10,330
quiz.

3
00:00:11,490 --> 00:00:17,670
And with our reducer that we already have in place, this is almost too easy now.

4
00:00:17,700 --> 00:00:24,960
So we have updated related pieces of state so many times in this section so far that I think that you

5
00:00:24,960 --> 00:00:27,690
could actually implement this on your own.

6
00:00:27,690 --> 00:00:32,370
So this entire feature, you might be able to just build it on your own now.

7
00:00:32,370 --> 00:00:35,730
So I think that might be a really nice challenge.

8
00:00:35,730 --> 00:00:44,370
So just add a button here with the same classes as I think this one here, or at least the same classes

9
00:00:44,370 --> 00:00:45,390
as this one.

10
00:00:45,390 --> 00:00:47,640
So basically it's just the same thing here.

11
00:00:47,640 --> 00:00:53,730
And then you just create a new action and then basically reset the state there.

12
00:00:53,730 --> 00:00:56,190
So that should not be too hard.

13
00:00:56,190 --> 00:01:01,020
And so please do that now and meet me back here once you are finished.

14
00:01:02,330 --> 00:01:05,120
So I hope that was fun.

15
00:01:05,450 --> 00:01:10,010
So I will just now copy and paste this button here.

16
00:01:11,410 --> 00:01:15,250
So place it right underneath this one right here.

17
00:01:15,640 --> 00:01:19,930
And then, of course, we need access to the dispatch function.

18
00:01:21,370 --> 00:01:24,400
From here, the text will be restart.

19
00:01:26,540 --> 00:01:27,410
Quiz.

20
00:01:27,530 --> 00:01:32,470
And then here, let's dispatch an action with the type of restart.

21
00:01:32,480 --> 00:01:34,280
So very creative.

22
00:01:35,880 --> 00:01:36,930
All right.

23
00:01:36,930 --> 00:01:39,840
And going back to our reducer.

24
00:01:41,270 --> 00:01:42,080
Case.

25
00:01:43,420 --> 00:01:44,530
Restart.

26
00:01:45,400 --> 00:01:52,270
And so here we could now do this in two different ways so we could define all the variables that we

27
00:01:52,270 --> 00:01:54,550
want to reset to their initial state.

28
00:01:56,970 --> 00:02:04,680
So just like this, for example, setting the score back to zero and basically doing all of this here

29
00:02:04,680 --> 00:02:09,490
because actually we want to restore all of them except for the questions array.

30
00:02:09,510 --> 00:02:12,600
So this one, we don't want to refetch, of course.

31
00:02:13,380 --> 00:02:19,920
And while probably we also want to reset this one here to ready, but these other ones, they should

32
00:02:19,950 --> 00:02:23,070
become exactly the values that we have right here.

33
00:02:23,800 --> 00:02:26,380
So let's try to do this.

34
00:02:27,290 --> 00:02:35,450
So we expand the entire initial state back here and then we just add the questions back in.

35
00:02:36,730 --> 00:02:44,020
So we say questions is equal state dot questions so that we don't lose them.

36
00:02:44,260 --> 00:02:48,860
And then finally the status should become ready.

37
00:02:48,880 --> 00:02:53,000
But again, you could just as well have done this.

38
00:02:53,020 --> 00:02:55,660
So return the entire state.

39
00:02:56,330 --> 00:02:59,990
But in overwrite like the points back to zero.

40
00:03:00,020 --> 00:03:02,060
The high score back to zero.

41
00:03:03,790 --> 00:03:07,540
The index back to zero as well.

42
00:03:07,540 --> 00:03:10,060
And there was just one more.

43
00:03:10,180 --> 00:03:11,590
Which was it?

44
00:03:13,100 --> 00:03:14,330
The answer back to null.

45
00:03:15,200 --> 00:03:19,460
Answer back to null and of course the status.

46
00:03:20,770 --> 00:03:21,940
To ready.

47
00:03:22,030 --> 00:03:23,800
So both of these work.

48
00:03:23,830 --> 00:03:31,780
I just prefer this one here because it's a bit more explicit that we basically want to reset to something

49
00:03:31,780 --> 00:03:34,000
similar to the initial state.

50
00:03:34,120 --> 00:03:37,570
So this was really easy, wasn't it?

51
00:03:37,600 --> 00:03:41,860
And so I actually really, really like this pattern.

52
00:03:41,860 --> 00:03:49,530
So it makes the state logic that we have here, all of it so decoupled from all the different components.

53
00:03:49,540 --> 00:03:56,260
And that's especially helpful when we later come back to the code and want to understand what is happening.

54
00:03:57,610 --> 00:04:02,550
So then all we will have to do is to basically read through these cases.

55
00:04:02,560 --> 00:04:08,900
And by that we can then understand what happens in our application and how the state transitions.

56
00:04:08,920 --> 00:04:15,280
So even without understanding much of the application, just by reading the reducer, we will know that

57
00:04:15,280 --> 00:04:21,070
some data might be received, that it might fail, that something will start, that there can be a new

58
00:04:21,070 --> 00:04:24,390
answer, that there can be a next question, and so on.

59
00:04:24,400 --> 00:04:31,120
So again, just from reading the reducer and so because of this, our state updates are really a lot

60
00:04:31,120 --> 00:04:32,400
more declarative.

61
00:04:32,410 --> 00:04:39,490
So we just map these different actions here to the state transitions that we then write out right here.

62
00:04:39,700 --> 00:04:45,640
So really, really amazing pattern, but I will talk more about that again by the end of the course

63
00:04:45,640 --> 00:04:48,430
when we summarize everything that we learned here.

64
00:04:48,990 --> 00:04:52,260
So now let's actually just test this.

65
00:04:53,500 --> 00:04:54,640
So let's start.

66
00:04:54,640 --> 00:04:57,040
And then I will cheat again.

67
00:04:57,280 --> 00:04:58,990
And going back.

68
00:05:00,940 --> 00:05:06,550
Or actually going forward automatically to index number 14.

69
00:05:09,290 --> 00:05:10,410
Then let's click here.

70
00:05:10,430 --> 00:05:13,550
Oh, actually, this is the demo version.

71
00:05:14,240 --> 00:05:16,850
So that is then really cheating, right?

72
00:05:16,850 --> 00:05:18,590
Because that's already working.

73
00:05:19,710 --> 00:05:20,520
So.

74
00:05:21,230 --> 00:05:21,650
Yeah.

75
00:05:21,650 --> 00:05:22,160
Again.

76
00:05:22,160 --> 00:05:23,090
14.

77
00:05:25,130 --> 00:05:28,280
And so we have just 20 points.

78
00:05:28,280 --> 00:05:34,730
So I guess we won't be the high scorer or actually we will because of course it's also reset to zero.

79
00:05:35,120 --> 00:05:40,750
And so here we then have the same as before, but now we can restart the quiz.

80
00:05:40,760 --> 00:05:41,990
So let's see.

81
00:05:42,350 --> 00:05:44,810
And this patch is not a function.

82
00:05:45,260 --> 00:05:46,100
Nice.

83
00:05:46,280 --> 00:05:49,040
So we didn't pass it in I guess.

84
00:05:50,050 --> 00:05:52,840
So, of course, we need that here.

85
00:05:56,450 --> 00:05:58,070
So let's do it all again.

86
00:06:02,120 --> 00:06:07,730
And if you want, you can, of course, go through the entire quiz, which I really hope you do.

87
00:06:07,760 --> 00:06:13,640
That's why I added 15 questions to it so that you can practice a little bit.

88
00:06:14,810 --> 00:06:17,870
But anyway, let's now click here and.

89
00:06:17,870 --> 00:06:18,860
Nice.

90
00:06:19,720 --> 00:06:22,060
So the questions remain the same.

91
00:06:22,150 --> 00:06:25,150
But everything else is reset.

92
00:06:26,020 --> 00:06:26,830
Great.

93
00:06:26,830 --> 00:06:28,920
So that was actually it.

94
00:06:28,930 --> 00:06:31,160
So we finished that part as well.

95
00:06:31,180 --> 00:06:34,960
All we have to do now is to get this timer here to run.

96
00:06:35,080 --> 00:06:41,680
So when this timer runs out, then basically the quiz stops.

97
00:06:41,860 --> 00:06:44,230
So you see here that it keeps updating.

98
00:06:44,500 --> 00:06:50,920
So let's set it like to five seconds so we see what happens here at the end.

99
00:06:50,950 --> 00:06:52,420
So let's wait for it.

100
00:06:53,240 --> 00:06:58,370
And so then you see that it automatically moves to the finish screen.

101
00:06:58,370 --> 00:07:02,480
And so let's now implement this functionality in our own application.
