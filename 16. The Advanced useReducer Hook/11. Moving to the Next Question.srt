1
00:00:00,830 --> 00:00:09,020
So now we have the simple task of moving to the next question as soon as an answer has been given.

2
00:00:10,390 --> 00:00:17,500
So as soon as the user clicks on one of these options, we want a button down here to appear that we

3
00:00:17,500 --> 00:00:18,320
can click.

4
00:00:18,340 --> 00:00:22,360
And so then we will move automatically to the next question.

5
00:00:22,570 --> 00:00:29,230
Now, as we have discussed before, moving to the next question basically means increasing this index

6
00:00:29,230 --> 00:00:30,610
here, right?

7
00:00:30,610 --> 00:00:37,150
Because it is based on this index that the current question is being read and then displayed.

8
00:00:37,300 --> 00:00:40,880
So that's what we do right here.

9
00:00:40,900 --> 00:00:45,910
So we're passing in the questions object that corresponds to the current index.

10
00:00:46,120 --> 00:00:48,910
And so let's now here.

11
00:00:49,610 --> 00:00:53,810
Create yet another possible action in our reducer.

12
00:00:54,230 --> 00:00:57,860
Now let's call this one just next.

13
00:00:58,510 --> 00:00:59,440
Question.

14
00:01:00,970 --> 00:01:03,400
So here we will just return.

15
00:01:05,500 --> 00:01:06,640
The current state.

16
00:01:06,640 --> 00:01:15,970
And all we want to change is the index property which will be set to state dot index plus one, and

17
00:01:15,970 --> 00:01:17,260
that should be it.

18
00:01:18,350 --> 00:01:19,520
At least for now.

19
00:01:19,550 --> 00:01:24,380
And so now we need to create, actually that button.

20
00:01:25,140 --> 00:01:29,670
So besides the question, we want to then display the button.

21
00:01:29,790 --> 00:01:37,110
And so let's actually always display a button component, but that button component will then only render

22
00:01:37,110 --> 00:01:41,090
the button element itself if there has been an answer.

23
00:01:41,100 --> 00:01:46,680
So we could also do it the other way around and do the conditional rendering right here.

24
00:01:46,680 --> 00:01:51,480
But instead we're going to do that conditional rendering inside the button.

25
00:01:51,750 --> 00:01:58,710
So we will allow this next button to basically decide if it wants to render itself or not.

26
00:02:00,170 --> 00:02:05,510
And so since we want to dispatch an action from there, we need to pass that in.

27
00:02:06,500 --> 00:02:10,350
And so now, of course, we need to create this component.

28
00:02:10,370 --> 00:02:16,310
But before we do that, here, we have a problem because we need a fragment now.

29
00:02:17,360 --> 00:02:18,200
Okay.

30
00:02:18,350 --> 00:02:23,210
And now, as I was saying, we need to create this new component.

31
00:02:24,350 --> 00:02:25,310
Right here.

32
00:02:27,180 --> 00:02:28,080
Okay.

33
00:02:31,240 --> 00:02:36,610
And then let's already receive the dispatch function.

34
00:02:36,610 --> 00:02:39,010
But we also need the answer.

35
00:02:39,010 --> 00:02:45,880
And so that's because of what I was saying earlier, so that we want this component here to allow,

36
00:02:45,880 --> 00:02:50,740
if it wants to render the button or not in case there has been an answer.

37
00:02:52,500 --> 00:02:54,330
So let's pass in also.

38
00:02:55,240 --> 00:02:55,870
The.

39
00:02:56,640 --> 00:02:57,780
Current answer.

40
00:02:57,870 --> 00:03:03,510
And of course we then need to import also this component here.

41
00:03:05,310 --> 00:03:08,520
So just duplicate that and.

42
00:03:09,690 --> 00:03:12,210
Yeah, I think that should be it.

43
00:03:12,300 --> 00:03:16,980
So let's go back here and accept that answer prop.

44
00:03:17,760 --> 00:03:19,350
And so now we can say.

45
00:03:20,170 --> 00:03:29,920
So doing an early return, we can say if the answer is null, which remember means that there has been

46
00:03:29,920 --> 00:03:33,340
no answer, then just return nothing here.

47
00:03:33,960 --> 00:03:39,060
So just return null and otherwise, then we actually create.

48
00:03:39,980 --> 00:03:40,730
A button.

49
00:03:42,840 --> 00:03:44,430
So here we say next.

50
00:03:44,430 --> 00:03:49,530
And the class name should be BTN and BTN UI.

51
00:03:49,650 --> 00:03:54,090
And then finally the onClick handler will be.

52
00:03:54,910 --> 00:03:56,320
A you function.

53
00:03:56,740 --> 00:04:01,150
And then, of course, we dispatch a new action.

54
00:04:01,930 --> 00:04:08,320
And so remember, this one is the one we just created, which is next question.

55
00:04:08,320 --> 00:04:15,130
And for this state transition that this will trigger our reducer doesn't need any data and therefore

56
00:04:15,160 --> 00:04:18,190
there is no payload here necessary.

57
00:04:19,140 --> 00:04:19,910
Okay.

58
00:04:19,920 --> 00:04:22,590
And let's see if this works.

59
00:04:22,890 --> 00:04:25,710
So let's start and let's click.

60
00:04:25,890 --> 00:04:28,050
And indeed, there is our button.

61
00:04:28,050 --> 00:04:29,700
And so let's now test.

62
00:04:30,710 --> 00:04:34,460
And yeah, it moved forward to the next question.

63
00:04:34,460 --> 00:04:41,990
But we still have a problem, which is that our answer has not been reset and so therefore we are still

64
00:04:41,990 --> 00:04:44,540
showing the previously given reply.

65
00:04:44,780 --> 00:04:46,760
So that's easy to fix.

66
00:04:46,760 --> 00:04:52,040
But what matters is that we can now actually move through these different questions.

67
00:04:53,160 --> 00:04:56,100
So let's then just quickly fix that problem.

68
00:04:56,100 --> 00:05:02,940
And so all we need to do is to again, come to our central place where all these state updating takes

69
00:05:02,940 --> 00:05:03,720
place.

70
00:05:05,100 --> 00:05:06,900
So what should we do here?

71
00:05:07,290 --> 00:05:11,160
Well, we just need to set the answer.

72
00:05:11,990 --> 00:05:13,250
Back to null.

73
00:05:14,490 --> 00:05:15,920
And that will fix it.

74
00:05:15,930 --> 00:05:22,350
And once again, we can really see here in action how all these different state variables closely belong

75
00:05:22,380 --> 00:05:23,100
together.

76
00:05:23,100 --> 00:05:30,180
And so the use reducer hook really was the perfect solution for managing our state in this application.

77
00:05:30,800 --> 00:05:33,350
But anyway, let's now again test this.

78
00:05:34,930 --> 00:05:37,780
And yeah, that fixes it.

79
00:05:38,860 --> 00:05:40,600
So let's try another one here.

80
00:05:43,240 --> 00:05:49,540
And this one is components just to see if our points are correctly updating.

81
00:05:50,170 --> 00:05:51,470
Yeah, and they are.

82
00:05:51,490 --> 00:05:57,760
So now we have 30 points, which is ten points for each question that we just successfully answered.

83
00:05:58,000 --> 00:06:02,930
And speaking of these points, we now actually want to display them up here.

84
00:06:02,950 --> 00:06:10,540
So the current points out of all the possible points together with the progress that we have been doing,

85
00:06:10,630 --> 00:06:13,630
so basically displaying this part right here.

86
00:06:14,350 --> 00:06:19,990
So don't wait and let's move together right to the next video to do that.
