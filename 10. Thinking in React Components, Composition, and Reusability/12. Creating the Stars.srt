1
00:00:00,920 --> 00:00:09,350
Next up, let's actually create the stars and make the component dynamic by reacting to a click event.

2
00:00:11,130 --> 00:00:15,040
So let's create a brand new component here.

3
00:00:15,060 --> 00:00:17,580
So function star.

4
00:00:19,220 --> 00:00:23,540
Because the JS code here is actually going to be a bit complex.

5
00:00:24,830 --> 00:00:29,060
But for now, we will want to return just the icon itself.

6
00:00:29,820 --> 00:00:36,180
So I actually already included that icon hidden here in the CSS file.

7
00:00:37,370 --> 00:00:41,960
So if you scroll all the way down here, you will find some code.

8
00:00:43,720 --> 00:00:44,770
Here it is.

9
00:00:44,770 --> 00:00:48,670
And so let's grab all of this comment.

10
00:00:48,910 --> 00:00:52,240
So all the way until the end, cut it from here.

11
00:00:52,870 --> 00:00:55,420
And paste it down here.

12
00:00:56,210 --> 00:00:58,040
Then we can close the sidebar.

13
00:00:58,040 --> 00:00:59,420
And this one.

14
00:01:00,080 --> 00:01:04,160
And so here we have the star icon as an SVG.

15
00:01:05,720 --> 00:01:09,140
So let's start here with the full star.

16
00:01:09,900 --> 00:01:11,190
So just this SVG.

17
00:01:13,440 --> 00:01:15,990
Copy that and paste it here.

18
00:01:16,200 --> 00:01:19,350
And then let's use that star here.

19
00:01:20,340 --> 00:01:24,390
So instead of this, we will simply include.

20
00:01:25,170 --> 00:01:26,040
The star.

21
00:01:27,240 --> 00:01:31,440
And then let's also define the key prop and let's simply use I.

22
00:01:31,710 --> 00:01:37,680
So the current index, which is not ideal, but at least then react doesn't complain anymore.

23
00:01:38,360 --> 00:01:41,810
Give it a save and nothing is happening here.

24
00:01:41,990 --> 00:01:43,580
Let's try that again.

25
00:01:44,620 --> 00:01:47,200
And let's inspect what we have here.

26
00:01:48,860 --> 00:01:50,870
So I was not expecting this.

27
00:01:53,210 --> 00:01:59,500
So we have indeed our stars here, but they appear to not have any height.

28
00:01:59,510 --> 00:02:02,270
And so let's try to fix that right here.

29
00:02:03,150 --> 00:02:08,610
So I will just wrap this SVG into a span element.

30
00:02:10,850 --> 00:02:12,320
Let's cut that from here.

31
00:02:12,830 --> 00:02:14,810
Place it at the end.

32
00:02:16,220 --> 00:02:21,350
And then I will again define some style object out here.

33
00:02:22,200 --> 00:02:27,450
So let's say const star style equals.

34
00:02:28,470 --> 00:02:32,970
So with, let's say, 48 pixels.

35
00:02:33,950 --> 00:02:36,560
And let's do the same for the height.

36
00:02:37,740 --> 00:02:47,490
Let's give it a display of block property as well and setting the cursor to a pointer so that they behave

37
00:02:47,520 --> 00:02:49,410
a bit like a button.

38
00:02:51,560 --> 00:02:57,680
And so then we should also define the role property here for accessibility.

39
00:02:59,020 --> 00:03:02,110
So this is just for accessibility.

40
00:03:02,110 --> 00:03:04,120
It has nothing to do with React.

41
00:03:06,250 --> 00:03:06,670
Okay.

42
00:03:06,670 --> 00:03:09,700
And then our star style.

43
00:03:10,660 --> 00:03:12,710
And there we go.

44
00:03:12,730 --> 00:03:15,440
So now we have our nice stars.

45
00:03:15,460 --> 00:03:21,550
Now, they might be a bit too big here, but we will later allow the user to set the size.

46
00:03:22,250 --> 00:03:25,730
I'm just noticing that we have maybe enough space between them.

47
00:03:25,730 --> 00:03:28,910
And so let's remove this gap right here.

48
00:03:29,950 --> 00:03:30,820
Great.

49
00:03:30,850 --> 00:03:38,230
Now let's actually make our component dynamic, meaning that whenever we click on one of these stars,

50
00:03:38,230 --> 00:03:42,400
we then want to display the current rating here in this paragraph element.

51
00:03:43,220 --> 00:03:51,740
So since we now want the UI to rerender based on an event, so we want something to happen on the screen,

52
00:03:51,740 --> 00:03:53,480
we need state.

53
00:03:55,570 --> 00:03:59,530
So let's create a new state variable called rating.

54
00:04:01,470 --> 00:04:07,980
Of course, by using use state and by default, let's set it to zero.

55
00:04:10,070 --> 00:04:10,230
No.

56
00:04:10,250 --> 00:04:10,820
Okay.

57
00:04:10,970 --> 00:04:13,910
Next, let's use that state.

58
00:04:14,120 --> 00:04:19,310
So as a second step, we include the rating prop right here.

59
00:04:19,790 --> 00:04:21,980
And so then we see zero.

60
00:04:22,010 --> 00:04:28,820
While that's maybe not so ideal because if the rating is still zero, that simply doesn't mean that

61
00:04:28,820 --> 00:04:32,450
the user hasn't basically rated yet.

62
00:04:32,450 --> 00:04:34,280
So they haven't done anything.

63
00:04:34,280 --> 00:04:41,330
And so here, let's say that we either want the rating or an empty string.

64
00:04:42,520 --> 00:04:48,940
And so thanks to short circuiting, we will then move here to the second part of the operator whenever

65
00:04:48,940 --> 00:04:50,410
this is a falsy value.

66
00:04:50,410 --> 00:04:54,460
But of course if we had one here, then we would see that one.

67
00:04:55,140 --> 00:05:00,900
Now, maybe just to clear the confusion a bit, let's remove these other.

68
00:05:01,860 --> 00:05:03,430
A two star ratings here.

69
00:05:03,450 --> 00:05:05,340
So working with just one.

70
00:05:05,670 --> 00:05:10,110
And so where do we now need to listen for the click events?

71
00:05:11,230 --> 00:05:15,450
So basically when the user clicks here, then the rating should become one.

72
00:05:15,460 --> 00:05:20,230
If they click here, then it should become two, three, four and five.

73
00:05:20,890 --> 00:05:26,860
So what this means is that we need to listen for the click event on each of these stars.

74
00:05:28,920 --> 00:05:32,460
So let's start by defining a onClick.

75
00:05:33,580 --> 00:05:38,650
Prop here, which we will then later receive inside the Star.

76
00:05:38,800 --> 00:05:42,070
So here we will now define a function.

77
00:05:43,420 --> 00:05:46,030
Which will actually set the rating.

78
00:05:46,710 --> 00:05:56,160
So let's say set rating and then whatever the current index is plus one, because remember that array

79
00:05:56,160 --> 00:06:00,750
indexes start at zero, but our rating should start at one.

80
00:06:01,140 --> 00:06:02,070
Okay.

81
00:06:03,030 --> 00:06:10,140
So now, of course, nothing will happen right now because we actually need to listen for that event

82
00:06:10,170 --> 00:06:12,270
on an HTML element.

83
00:06:12,300 --> 00:06:14,910
So like an X element.

84
00:06:15,210 --> 00:06:21,510
So what that means is that here we need to now accept that onClick handler.

85
00:06:21,690 --> 00:06:24,960
So this function that we defined right here.

86
00:06:28,450 --> 00:06:31,840
And then use the onClick prop right here.

87
00:06:32,580 --> 00:06:36,480
So then actually listen for the event and react to it.

88
00:06:37,250 --> 00:06:44,270
And if this is a bit confusing, then let's maybe change the name here from on click to on rate.

89
00:06:45,110 --> 00:06:49,400
And so then it becomes really obvious that this is actually our own prop.

90
00:06:51,610 --> 00:06:57,670
So this is our own handler function and we could, of course even have created that separately.

91
00:06:59,140 --> 00:07:01,510
So on click.

92
00:07:02,480 --> 00:07:04,610
Should be on rate.

93
00:07:05,630 --> 00:07:11,750
And so this is basically what we have been doing all the time, which is to pass an event handler function

94
00:07:11,750 --> 00:07:14,330
from the component that owns the state.

95
00:07:14,330 --> 00:07:19,760
So this one right into a component that wants to actually update that state.

96
00:07:19,910 --> 00:07:26,150
So in this case, that's star, so we can make that even more explicit if we want.

97
00:07:26,770 --> 00:07:34,030
So we can say function handle rate or handle rating maybe.

98
00:07:34,030 --> 00:07:40,810
And then here we accept a rating and all we do is then set rating.

99
00:07:42,040 --> 00:07:44,860
Well to that rating that we receive.

100
00:07:44,890 --> 00:07:46,330
And then here we can use.

101
00:07:46,940 --> 00:07:48,830
That handle rating function.

102
00:07:48,830 --> 00:07:53,600
And so with this, we created a similar pattern to what we have done all the time.

103
00:07:53,600 --> 00:08:00,410
So creating a handler function in the component that owns the state and then passing that handler function

104
00:08:00,410 --> 00:08:04,760
into some other child component which will actually update the state.

105
00:08:04,880 --> 00:08:08,320
Now here we are actually passing this function here.

106
00:08:08,330 --> 00:08:15,950
So not just this one, because here we need to fix the value of the rating that we want to be set for

107
00:08:15,950 --> 00:08:16,730
each star.

108
00:08:17,990 --> 00:08:18,500
Okay.

109
00:08:18,500 --> 00:08:20,500
That was a lot of explanation.

110
00:08:20,510 --> 00:08:26,510
Let's just reload here and now as I click, you see that the state does indeed update.

111
00:08:28,120 --> 00:08:29,120
All right.

112
00:08:29,360 --> 00:08:31,280
So that's already working.

113
00:08:31,280 --> 00:08:37,850
And yeah, if this was a bit difficult for you to understand, then you can, as always, just pause

114
00:08:37,850 --> 00:08:41,000
the video here and analyze the code on your own.

115
00:08:41,090 --> 00:08:46,250
So what we did here is actually a bit similar to what we did in previous exercises.

116
00:08:46,250 --> 00:08:51,260
For example, I think in the accordion exercise we did something very similar.

117
00:08:52,150 --> 00:08:52,360
No.

118
00:08:52,360 --> 00:08:52,840
Okay.

119
00:08:52,840 --> 00:09:00,610
And now to finish, what I want to do is to display only the amount of stars equal to the rating in

120
00:09:00,610 --> 00:09:03,550
full and all the other stars empty.

121
00:09:03,700 --> 00:09:05,100
So just like here.

122
00:09:05,110 --> 00:09:12,100
So here, if I click on the five, then you see that five stars are full and the other ones are empty.

123
00:09:12,100 --> 00:09:15,940
And so here, let's now quickly do exactly the same thing.

124
00:09:16,700 --> 00:09:20,800
So we already have that other empty star right here.

125
00:09:20,810 --> 00:09:26,810
And so now we want to basically conditionally render either the full or the empty star.

126
00:09:27,780 --> 00:09:30,930
So let's grab this here.

127
00:09:33,070 --> 00:09:34,540
Let's cut it, actually.

128
00:09:36,700 --> 00:09:40,540
And then here let's enter JavaScript mode.

129
00:09:41,750 --> 00:09:49,220
So we will want to have a prop here for the star that says if this star is full.

130
00:09:51,000 --> 00:09:53,010
So we will take care of that later.

131
00:09:53,010 --> 00:10:00,210
But for now, let's just say if the star is full, then render this part so that SVG element.

132
00:10:00,210 --> 00:10:03,000
And if not, then render this one.

133
00:10:04,720 --> 00:10:05,470
All right.

134
00:10:05,470 --> 00:10:10,330
And so now, of course, full is undefined because we are not passing it in.

135
00:10:10,330 --> 00:10:13,660
And therefore, all of the stars are empty right now.

136
00:10:14,530 --> 00:10:19,240
So how do we define whether a star is full or not?

137
00:10:20,350 --> 00:10:23,590
Well, it's actually pretty simple.

138
00:10:25,370 --> 00:10:29,900
So full should basically be a true or false value, right?

139
00:10:29,930 --> 00:10:33,410
That's why this conditional rendering here works.

140
00:10:33,410 --> 00:10:37,670
So again, when full is true, then this one will be rendered.

141
00:10:37,670 --> 00:10:41,420
And if it's false, then the empty star.

142
00:10:42,580 --> 00:10:49,720
So here we just want to now write a condition basically that will always be either true or false.

143
00:10:49,930 --> 00:10:57,160
So all we have to do is to say, is the current rating greater or equal?

144
00:10:58,000 --> 00:11:04,000
A plus one, which is always the rating for the currently generated star.

145
00:11:04,780 --> 00:11:08,080
And you see that immediately That worked here.

146
00:11:08,320 --> 00:11:09,130
Great.

147
00:11:09,130 --> 00:11:12,160
So let's see why this actually works.

148
00:11:12,800 --> 00:11:16,490
So it all starts with this AI variable right here.

149
00:11:16,490 --> 00:11:23,690
And so this comes from the index of the empty array that we create here with the length of Max rating.

150
00:11:23,690 --> 00:11:27,740
So we create that array and then we immediately loop over it.

151
00:11:27,740 --> 00:11:31,760
And so then the first star that we create has the number zero.

152
00:11:31,880 --> 00:11:36,080
So this one is star zero, one, two, three and four.

153
00:11:36,110 --> 00:11:40,730
We then use that index in order to handle our rating.

154
00:11:40,730 --> 00:11:45,530
So if we click on the very first star here, it will be zero plus one.

155
00:11:45,530 --> 00:11:47,210
And so it becomes one.

156
00:11:47,360 --> 00:11:54,950
If we click on the third star here, well then here the index is two and then two plus one makes three.

157
00:11:54,950 --> 00:11:58,880
And so then the rating as we see is set to three.

158
00:11:58,880 --> 00:12:06,080
And then in order to determine whether a star is full or not, all we need to do is to compare the currently

159
00:12:06,080 --> 00:12:10,130
set rating to the index of the current star.

160
00:12:10,250 --> 00:12:12,990
So here the index is zero plus one.

161
00:12:12,990 --> 00:12:17,430
So here it's one, here, it's two, here it's three, four and five.

162
00:12:17,430 --> 00:12:20,010
And so right now our rating is three.

163
00:12:20,040 --> 00:12:26,610
And so here, of course, that three is greater than one here, it's greater than two here, it's greater

164
00:12:26,610 --> 00:12:27,660
or equal three.

165
00:12:27,690 --> 00:12:29,430
And so it's still true.

166
00:12:29,430 --> 00:12:31,830
But then here it's of course, false.

167
00:12:31,830 --> 00:12:37,950
So three is not greater or equal four and therefore, this one here is then not full.

168
00:12:37,950 --> 00:12:44,370
So this condition will return false, which will then make the star being rendered as empty.

169
00:12:45,550 --> 00:12:46,180
Okay.

170
00:12:46,180 --> 00:12:48,330
So hopefully that made sense.

171
00:12:48,340 --> 00:12:52,530
And indeed our component is now already almost working.

172
00:12:52,540 --> 00:12:57,850
All that is missing is this functionality of hovering the stars.

173
00:12:57,970 --> 00:13:01,180
And so let's take care of that in the next lecture.
