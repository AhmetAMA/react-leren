1
00:00:01,150 --> 00:00:08,620
Let's finish this section with the three most important life cycle methods which are component did mount.

2
00:00:08,620 --> 00:00:13,240
Component did update and component will unmount.

3
00:00:14,580 --> 00:00:21,480
And we are going to use these lifecycle methods to implement two more features into our application.

4
00:00:21,690 --> 00:00:26,910
So first of all, we want to search for weather as we type.

5
00:00:27,550 --> 00:00:34,240
So, for example, as I keep typing, it will then search basically for different locations until I

6
00:00:34,240 --> 00:00:36,400
arrive at something that I want.

7
00:00:36,640 --> 00:00:42,490
So notice that we don't have the search weather button here anymore, but instead, each time that I

8
00:00:42,490 --> 00:00:45,700
type, a new search will be fired off.

9
00:00:46,480 --> 00:00:48,040
So that's one of the features.

10
00:00:48,040 --> 00:00:54,370
And the other one is as I reload the page now, then you see that we get the exact same location that

11
00:00:54,370 --> 00:00:55,360
we had before.

12
00:00:55,360 --> 00:01:02,590
And so that's because we store this location here in local storage each time that we type a new location

13
00:01:02,590 --> 00:01:03,340
in here.

14
00:01:03,550 --> 00:01:08,770
So let's now use lifecycle methods to implement these two features.

15
00:01:09,700 --> 00:01:17,770
So lifecycle methods are essentially special methods that all react components get access to and which

16
00:01:17,770 --> 00:01:23,390
we can use to run side effects at different points of the component lifecycle.

17
00:01:23,410 --> 00:01:31,810
And the most important points of the lifecycle are mounting rerendering and unmounting of the component.

18
00:01:31,960 --> 00:01:38,560
So we already talked about these before when we first talked about the Useeffect Hook, right?

19
00:01:39,130 --> 00:01:46,180
Now, the lifecycle methods are not exactly the same thing as the use effect hook in function components,

20
00:01:46,180 --> 00:01:51,110
but they are the closest similar thing that we have in class components.

21
00:01:51,130 --> 00:01:56,320
And so let's now start with the component did mount method.

22
00:01:57,730 --> 00:02:00,220
So let's just specify that one here.

23
00:02:01,450 --> 00:02:02,710
So component.

24
00:02:03,340 --> 00:02:04,750
Did mount.

25
00:02:05,050 --> 00:02:07,840
And so this is really just another method.

26
00:02:08,170 --> 00:02:14,260
And as the name of the method says, this one is called immediately after rendering.

27
00:02:14,260 --> 00:02:21,610
So basically after the Dom has been created, just like a useeffect took with the empty dependency array.

28
00:02:21,610 --> 00:02:28,360
And so this is the ideal place to perform some initial side effects as the component loads.

29
00:02:28,900 --> 00:02:37,420
So what we can do here as the component renders and first mounts, is to call our fetch weather method.

30
00:02:39,350 --> 00:02:39,940
Okay.

31
00:02:39,940 --> 00:02:46,750
And so what this will do is that as soon as the app is loaded, it will immediately start fetching for

32
00:02:46,750 --> 00:02:47,440
the weather.

33
00:02:47,440 --> 00:02:50,290
And indeed, that's exactly what happened here.

34
00:02:51,050 --> 00:02:56,840
Now, this only works because we have Lisbon here as a predefined location string.

35
00:02:56,840 --> 00:03:02,690
But this is just to demonstrate how this life cycle method here works.

36
00:03:03,080 --> 00:03:09,260
So again, this is not exactly the same as the use effect hook, but the closest thing that we can imagine

37
00:03:09,260 --> 00:03:14,230
this being is a use effect with the empty dependency array.

38
00:03:14,240 --> 00:03:18,170
So only running on mount, but not on Rerenders.

39
00:03:19,130 --> 00:03:19,760
Okay.

40
00:03:19,760 --> 00:03:25,700
But speaking of Rerenders, of course we also have a lifecycle method for that event.

41
00:03:26,450 --> 00:03:29,540
And so that one is called component did.

42
00:03:30,450 --> 00:03:31,320
Update.

43
00:03:32,960 --> 00:03:33,820
All right.

44
00:03:33,860 --> 00:03:41,450
Now, what's special about this method is that React actually gives it access to the previous state

45
00:03:41,450 --> 00:03:43,040
and the previous props.

46
00:03:44,000 --> 00:03:47,060
So the first argument is the previous props.

47
00:03:48,050 --> 00:03:51,110
And it's the second one is the previous state.

48
00:03:51,700 --> 00:03:59,780
And so this is then a bit similar to the use effect hook with some variable here in the dependency array.

49
00:03:59,800 --> 00:04:06,400
For example, we can now use these previous state here to check if the location has changed.

50
00:04:06,400 --> 00:04:13,240
And so that's then similar to having a use effect with location in the dependency array.

51
00:04:13,270 --> 00:04:17,890
The difference is that this method right here is not called on mount.

52
00:04:17,890 --> 00:04:20,080
So really only on rerender.

53
00:04:20,080 --> 00:04:25,040
While this use effect would of course also be called on mount.

54
00:04:25,060 --> 00:04:26,680
So on the initial render.

55
00:04:27,410 --> 00:04:33,320
So as I was saying, we can now compare the current state with the previous state.

56
00:04:33,410 --> 00:04:36,950
So this dot state dot location.

57
00:04:37,570 --> 00:04:38,900
If it's different.

58
00:04:38,920 --> 00:04:41,800
So if it has changed across renders.

59
00:04:42,650 --> 00:04:45,200
Then we can do something.

60
00:04:46,530 --> 00:04:53,730
And of course, we can also not do this comparison and not even do anything with this previous state

61
00:04:53,730 --> 00:04:55,140
or the previous props.

62
00:04:55,140 --> 00:05:02,280
But in this case we actually need them because now what we want to do is to again fetch the weather

63
00:05:02,700 --> 00:05:07,230
in case that the new location is different from the previous one.

64
00:05:08,150 --> 00:05:13,640
And so this will then basically enable us to search for the weather as we type.

65
00:05:16,640 --> 00:05:19,640
So you see it's already working.

66
00:05:19,640 --> 00:05:24,200
So it's doing exactly the same thing as before in our demo app.

67
00:05:24,890 --> 00:05:31,970
Now, one downside that you can immediately see is that our fetching logic here is now spread across

68
00:05:31,970 --> 00:05:34,240
these two lifecycle methods.

69
00:05:34,250 --> 00:05:38,660
So we're fetching the weather on mount and also on rerender.

70
00:05:38,660 --> 00:05:42,170
And so then we need to call this function here in two places.

71
00:05:42,380 --> 00:05:48,440
Now that's not a big deal, of course, in this situation, but in real world applications, this used

72
00:05:48,440 --> 00:05:50,600
to be really a big problem.

73
00:05:50,600 --> 00:05:56,570
So we used to have logic that belongs together, spread out over these different methods.

74
00:05:56,570 --> 00:05:59,810
So that then makes the code a lot harder to understand.

75
00:05:59,810 --> 00:06:05,270
And so use effect actually solved some of these problems again, because this one here.

76
00:06:05,270 --> 00:06:10,610
So this effect like this would run both on mount and on rerender.

77
00:06:11,000 --> 00:06:17,690
But anyway, we can now remove this button here as we now no longer need it.

78
00:06:19,470 --> 00:06:20,130
All right.

79
00:06:20,140 --> 00:06:26,380
What we can also remove to make this a bit more real is, of course, this initial location.

80
00:06:28,780 --> 00:06:35,650
But this will now give us a problem because right now on the component mount, this will still attempt

81
00:06:35,650 --> 00:06:39,220
to fetch the weather, even though right now we have no location.

82
00:06:39,220 --> 00:06:45,340
And so actually, in this particular case, it doesn't make any sense to even fetch the weather as the

83
00:06:45,340 --> 00:06:46,420
component mounts.

84
00:06:46,420 --> 00:06:48,790
So I will now remove this from here.

85
00:06:48,790 --> 00:06:55,540
But it was still important to understand initially how this lifecycle method here works and we will

86
00:06:55,540 --> 00:06:58,090
actually need it again here in a minute.

87
00:06:58,730 --> 00:07:00,710
But now let's just reload here.

88
00:07:00,710 --> 00:07:03,940
And so then we don't get that error anymore.

89
00:07:03,950 --> 00:07:07,400
But we still get now this error.

90
00:07:07,400 --> 00:07:11,390
And first, that's because this one here doesn't exist.

91
00:07:12,520 --> 00:07:14,290
But let's try that again.

92
00:07:14,530 --> 00:07:18,530
And so here now, the problem is that there was no location found.

93
00:07:18,550 --> 00:07:26,020
So this only starts searching for something if we have at least two characters in our string.

94
00:07:26,320 --> 00:07:30,250
So let's quickly fix that by coming here into this function.

95
00:07:30,370 --> 00:07:40,600
And we can just say if this dot, state, dot, location, dot length is less than two, then just return.

96
00:07:41,300 --> 00:07:43,820
So then just don't do anything.

97
00:07:44,360 --> 00:07:47,270
So now, Yeah, now that's fixed.

98
00:07:47,450 --> 00:07:53,690
And again, as we keep typing, it will then show us the weather for those different locations.

99
00:07:55,270 --> 00:07:57,030
Okay, great.

100
00:07:57,040 --> 00:08:03,940
And now what we want to do is that feature where it will remember our location in local storage.

101
00:08:04,670 --> 00:08:06,950
So how are we going to do that?

102
00:08:07,190 --> 00:08:13,610
Well, basically, each time that we type a new character here, we want to store the location into

103
00:08:13,610 --> 00:08:14,660
local storage.

104
00:08:14,660 --> 00:08:22,310
And so then once again, the component did update lifecycle method is the perfect place for doing that.

105
00:08:22,670 --> 00:08:29,120
So besides fetching the weather, we also want local storage dot set item.

106
00:08:31,680 --> 00:08:33,510
Let's call this one location.

107
00:08:33,750 --> 00:08:41,250
And then what we want to store there is this dot state dot location.

108
00:08:41,250 --> 00:08:46,320
And since this is already a string, we don't even need to convert it to a string.

109
00:08:47,480 --> 00:08:53,030
And so now as we keep typing, let's check out our.

110
00:08:54,930 --> 00:08:56,400
Application tap here.

111
00:08:57,240 --> 00:08:58,830
With a bit more space.

112
00:08:58,860 --> 00:09:04,920
And then indeed, here we have Pharaoh in the local storage right now.

113
00:09:04,920 --> 00:09:07,080
And so all we have to do now.

114
00:09:08,070 --> 00:09:12,030
Because right now, of course, we don't get that value yet.

115
00:09:12,060 --> 00:09:18,270
And so what we have to do now is to read that value from local storage as the component mounts.

116
00:09:18,300 --> 00:09:25,620
And so the perfect place for that is again or component did mount lifecycle method.

117
00:09:26,390 --> 00:09:34,060
So here we will want to set our state based on that data that's coming from local storage.

118
00:09:34,070 --> 00:09:36,710
So this dot set state.

119
00:09:37,440 --> 00:09:40,830
And then remember, it always needs to be an object here.

120
00:09:42,310 --> 00:09:44,380
So with the location property.

121
00:09:45,420 --> 00:09:49,350
And then simply local storage dot get item.

122
00:09:49,970 --> 00:09:52,760
From the key of location.

123
00:09:53,530 --> 00:10:00,040
Now, when we run this app for the first time, there won't be no local storage yet, at least not with

124
00:10:00,040 --> 00:10:00,660
this key.

125
00:10:00,670 --> 00:10:04,240
And so let's then set a default of an empty string.

126
00:10:05,660 --> 00:10:06,230
Okay.

127
00:10:06,230 --> 00:10:07,580
And there it is.

128
00:10:08,480 --> 00:10:11,910
So let's reload here and then that's working great.

129
00:10:11,930 --> 00:10:14,930
So let's just analyze what happens here.

130
00:10:15,230 --> 00:10:21,320
So as the component is mounted, it will then read this value here from local storage.

131
00:10:22,000 --> 00:10:22,840
Right here.

132
00:10:22,840 --> 00:10:24,910
So in this lifecycle method.

133
00:10:25,000 --> 00:10:29,980
So this then sets the state which will in turn rerender the component.

134
00:10:29,980 --> 00:10:35,860
And so then after that rerender, the component did update method will get called.

135
00:10:35,860 --> 00:10:41,920
And so that's where we then fetch the weather because of course the new location will be different than

136
00:10:41,920 --> 00:10:42,910
the previous one.

137
00:10:43,120 --> 00:10:50,680
But if we copy this, for example, and then just paste the same thing here, then the new state is

138
00:10:50,680 --> 00:10:52,390
the same as the current one.

139
00:10:52,390 --> 00:10:54,370
And so then nothing happened here.

140
00:10:55,000 --> 00:10:55,810
Great.

141
00:10:55,810 --> 00:11:00,830
So this is how we work with lifecycle methods in a very simple way.

142
00:11:00,850 --> 00:11:05,650
So just again, some simple examples, but that's all we need right here.

143
00:11:05,650 --> 00:11:12,340
And now to finish, let's just take one more minute to talk about another lifecycle method, which is

144
00:11:12,340 --> 00:11:15,220
the component will unmount method.

145
00:11:15,370 --> 00:11:20,530
So this one is a bit less important, but let's just mention it here as well.

146
00:11:21,110 --> 00:11:22,450
Now this component.

147
00:11:22,460 --> 00:11:25,760
So the app component will actually never unmount.

148
00:11:25,790 --> 00:11:28,780
So it doesn't make sense to use it here.

149
00:11:28,790 --> 00:11:35,210
So let's do it here in the weather because of course, this component will sometimes not exist.

150
00:11:36,150 --> 00:11:40,440
So when there is no string here, then there is also no weather component.

151
00:11:41,180 --> 00:11:46,820
So we can just then use component will unmount.

152
00:11:46,940 --> 00:11:53,960
And so doing this is very similar to returning a cleanup function from a effect function.

153
00:11:54,080 --> 00:11:59,480
The difference is that this one really only runs after the component unmounts.

154
00:11:59,480 --> 00:12:04,880
So after it disappears and is destroyed, not between renders.

155
00:12:05,000 --> 00:12:12,380
So again, this lifecycle method is mostly used to clean up after some effects, which in this case

156
00:12:12,380 --> 00:12:13,640
we don't really have.

157
00:12:13,670 --> 00:12:17,830
And so there's not really any meaningful thing that we can do here.

158
00:12:17,840 --> 00:12:21,860
So let's just log something to the console just to show you.

159
00:12:22,780 --> 00:12:24,700
So weather will.

160
00:12:25,900 --> 00:12:28,440
Unmount or is unmounting?

161
00:12:28,450 --> 00:12:29,740
It doesn't really matter.

162
00:12:31,190 --> 00:12:31,460
No.

163
00:12:31,460 --> 00:12:32,150
Right.

164
00:12:33,750 --> 00:12:38,670
So again, between renders, this is not running, so it's not doing anything.

165
00:12:38,670 --> 00:12:39,600
But then.

166
00:12:40,300 --> 00:12:42,970
Well, nothing happens, actually.

167
00:12:42,970 --> 00:12:46,000
So our weather didn't even disappear.

168
00:12:46,000 --> 00:12:49,960
But that's just because we probably have some problem here.

169
00:12:50,050 --> 00:12:55,510
So let's come back here to the function where we fetch this data.

170
00:12:55,510 --> 00:13:04,030
And so here what we want to do instead is to not only return, but also just set the state to empty

171
00:13:04,030 --> 00:13:10,210
weather again, basically doing return this dot set state.

172
00:13:11,170 --> 00:13:18,340
And then the weather should basically be reset to an empty object.

173
00:13:19,480 --> 00:13:21,820
So let's try that again.

174
00:13:23,490 --> 00:13:24,140
Okay.

175
00:13:24,380 --> 00:13:29,090
And then now we saw that the component disappeared.

176
00:13:29,090 --> 00:13:36,700
And so then the component will unmount method was called and therefore we got this log here in our console.

177
00:13:36,710 --> 00:13:42,980
And so this again would be ideal to clean up after some side effects that we created.

178
00:13:42,980 --> 00:13:49,460
So not really the case here, but now you know that this method exists and that it's one of the three

179
00:13:49,460 --> 00:13:51,770
most important ones, I would say.

180
00:13:52,130 --> 00:13:59,810
Now if we write again here component, you see that there are many other lifecycle methods, but these

181
00:13:59,810 --> 00:14:01,130
are not that important.

182
00:14:01,130 --> 00:14:08,660
And so therefore we will not talk about that here in this basically crash course of class components.

183
00:14:08,660 --> 00:14:15,620
So remember that the goal of this section was not for you to really learn how to write these class based

184
00:14:15,620 --> 00:14:20,930
components on your own, but more to understand how they work and what they look like.

185
00:14:20,930 --> 00:14:28,500
In case you ever come across some of them in your work in case that company still maintains some old

186
00:14:28,500 --> 00:14:29,370
codebase.

187
00:14:29,370 --> 00:14:32,280
So that's perfectly possible thing to happen.

188
00:14:32,280 --> 00:14:37,980
And so I thought it was a good idea to include this section here so that you can be prepared for that

189
00:14:37,980 --> 00:14:39,210
possible future.

190
00:14:39,210 --> 00:14:46,470
And now if you feel like it, you could actually convert this entire application back to function components.

191
00:14:46,470 --> 00:14:52,860
So I think that would be a really, really great exercise for you to practice everything that we have

192
00:14:52,860 --> 00:14:58,800
learned up until this point, including understanding even better how these class components work.

193
00:14:59,010 --> 00:15:03,150
So in case you do that, I would really like to see your implementation.

194
00:15:03,150 --> 00:15:11,640
So make sure that you paste something like a link to a GitHub repo in the course Q&amp;A after this lecture.

195
00:15:11,640 --> 00:15:15,810
And so yeah, really looking forward to seeing that.

196
00:15:15,810 --> 00:15:22,590
And then once you're done with that or even if you don't want to do it, I hope to see you soon in the

197
00:15:22,590 --> 00:15:27,900
next section, which will be the beginning of part three of this course.

198
00:15:27,900 --> 00:15:33,900
So this is where we will finally enter the advanced React part of this course.
